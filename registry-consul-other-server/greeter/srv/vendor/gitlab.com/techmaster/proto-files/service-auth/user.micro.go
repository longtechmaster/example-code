// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	user.proto
	base.proto
	user_admin.proto
	user_role.proto
	user_member.proto
	service_other.proto

It has these top-level messages:
	EmptyRequest
	ResultResponse
	Pagination
	User
	UserInfo
	UserProperty
	UserProfile
	Role
	Permission
	UserChangeProfileEvent
	CreateUserPropertyRequest
	GetUserPropertiesResponse
	CreateUserRequest
	CreateUserResponse
	GetUsersRequest
	GetUsersResponse
	SearchUsersRequest
	SearchUsersResponse
	GetUserByIdRequest
	GetUserByIdResponse
	GetUsersByIdsRequest
	GetUsersByIdsResponse
	UpdateUserRequest
	UpdateUserResponse
	DeleteUserRequest
	CreateRoleRequest
	CreateRoleResponse
	GetRolesRequest
	GetRolesResponse
	GetRoleByIdRequest
	GetRoleByIdResponse
	UpdateRoleRequest
	UpdateRoleResponse
	DeleteRoleRequest
	GetAllPermissionsResponse
	SetPublicPermissionsRequest
	GetPrivatePermissionsResponse
	SetRolesforPrivatePermissionsRequest
	GetUsersbyRoleRequest
	GetUsersbyRoleResponse
	AuthorizeRequest
	AuthorizeResponse
	RegisterUserRequest
	RegisterUserResponse
	RegisterUserByFacebookRequest
	RegisterUserByFacebookResponse
	RegisterUserByGoogleRequest
	RegisterUserByGoogleResponse
	LoginRequest
	LoginResponse
	ForgotPasswordRequest
	ResetPasswordRequest
	SendVerifyEmailRequest
	VerifyEmailRequest
	GetProfileResponse
	UpdateProfileRequest
	UpdateProfileResponse
	ChangePasswordRequest
	ChangeEmailRequest
	UpdatePermissionsFromOtherServiceRequest
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthClient interface {
	// Đăng ký tài khoản (cần có captcha chống spam)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...client.CallOption) (*RegisterUserResponse, error)
	// Đăng ký tài khoản qua Facebook
	RegisterUserByFacebook(ctx context.Context, in *RegisterUserByFacebookRequest, opts ...client.CallOption) (*RegisterUserByFacebookResponse, error)
	// Đăng ký tài khoản qua Google
	RegisterUserByGoogle(ctx context.Context, in *RegisterUserByGoogleRequest, opts ...client.CallOption) (*RegisterUserByGoogleResponse, error)
	// Đăng nhập (có khóa tài khoản nếu đăng nhập sai nhiều lần)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	// Quên mật khẩu (gửi email reset mật khẩu)
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Reset mật khẩu (lấy đường dẫn trong email, kiểm tra tính hợp lệ của token trong đường dẫn)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Gửi xác thực email (gửi email xác thực)
	SendVerifyEmail(ctx context.Context, in *SendVerifyEmailRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Xác thực email (lấy đường dẫn trong email, kiểm tra tính hợp lệ của token trong đường dẫn)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lấy thông tin cá nhân
	GetProfile(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetProfileResponse, error)
	// Cập nhật thông tin cá nhân
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...client.CallOption) (*UpdateProfileResponse, error)
	// Đổi mật khẩu
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Đổi email (cần xác thực email mới, dùng lại hàm VerifyEmail)
	ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Tạo thêm thuộc tính cho User (user info)
	CreateUserProperty(ctx context.Context, in *CreateUserPropertyRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lấy ra các thuộc tính cho User (user info)
	GetUserProperties(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetUserPropertiesResponse, error)
	// Tạo User
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	// Lấy danh sách User (có phân trang, sorting)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...client.CallOption) (*GetUsersResponse, error)
	// Tìm kiếm User theo từ khóa
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...client.CallOption) (*SearchUsersResponse, error)
	// Lấy thông tin User theo Id
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...client.CallOption) (*GetUserByIdResponse, error)
	// Lấy danh sách User theo danh sách Id
	GetUsersByIds(ctx context.Context, in *GetUsersByIdsRequest, opts ...client.CallOption) (*GetUsersByIdsResponse, error)
	// Cập nhật thông tin User
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	// Xóa User (không được xóa tài khoản Super Admin)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Tạo Role
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error)
	// Lấy danh sách Role (có phân trang, sorting)
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...client.CallOption) (*GetRolesResponse, error)
	// Lấy thông tin Role theo Id
	GetRoleById(ctx context.Context, in *GetRoleByIdRequest, opts ...client.CallOption) (*GetRoleByIdResponse, error)
	// Cập nhật Role
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*UpdateRoleResponse, error)
	// Xóa Role
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lấy ra danh sách tất cả các Service và Method
	GetAllPermissions(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetAllPermissionsResponse, error)
	// Thiết lập chế độ Public cho các Service và Method
	SetPublicPermissions(ctx context.Context, in *SetPublicPermissionsRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lấy ra danh sách các Service và Method ở chế độ Private
	GetPrivatePermissions(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetPrivatePermissionsResponse, error)
	// Thiết lập quyền cho các Service và Method ở chế độ Private
	SetRolesforPrivatePermissions(ctx context.Context, in *SetRolesforPrivatePermissionsRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lọc User theo Role
	GetUsersbyRole(ctx context.Context, in *GetUsersbyRoleRequest, opts ...client.CallOption) (*GetUsersbyRoleResponse, error)
	// Kiểm tra quyền truy cập vào một Method
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...client.CallOption) (*AuthorizeResponse, error)
	// Khai báo các Service/Method từ Service-Video
	UpdatePermissionsFromOtherService(ctx context.Context, in *UpdatePermissionsFromOtherServiceRequest, opts ...client.CallOption) (*ResultResponse, error)
}

type authClient struct {
	c           client.Client
	serviceName string
}

func NewAuthClient(serviceName string, c client.Client) AuthClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &authClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *authClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...client.CallOption) (*RegisterUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.RegisterUser", in)
	out := new(RegisterUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RegisterUserByFacebook(ctx context.Context, in *RegisterUserByFacebookRequest, opts ...client.CallOption) (*RegisterUserByFacebookResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.RegisterUserByFacebook", in)
	out := new(RegisterUserByFacebookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RegisterUserByGoogle(ctx context.Context, in *RegisterUserByGoogleRequest, opts ...client.CallOption) (*RegisterUserByGoogleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.RegisterUserByGoogle", in)
	out := new(RegisterUserByGoogleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.ForgotPassword", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.ResetPassword", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SendVerifyEmail(ctx context.Context, in *SendVerifyEmailRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.SendVerifyEmail", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.VerifyEmail", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetProfile(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetProfileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetProfile", in)
	out := new(GetProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...client.CallOption) (*UpdateProfileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.UpdateProfile", in)
	out := new(UpdateProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.ChangePassword", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.ChangeEmail", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateUserProperty(ctx context.Context, in *CreateUserPropertyRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.CreateUserProperty", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserProperties(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetUserPropertiesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetUserProperties", in)
	out := new(GetUserPropertiesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...client.CallOption) (*GetUsersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetUsers", in)
	out := new(GetUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...client.CallOption) (*SearchUsersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.SearchUsers", in)
	out := new(SearchUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...client.CallOption) (*GetUserByIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetUserById", in)
	out := new(GetUserByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUsersByIds(ctx context.Context, in *GetUsersByIdsRequest, opts ...client.CallOption) (*GetUsersByIdsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetUsersByIds", in)
	out := new(GetUsersByIdsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.DeleteUser", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.CreateRole", in)
	out := new(CreateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...client.CallOption) (*GetRolesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetRoles", in)
	out := new(GetRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetRoleById(ctx context.Context, in *GetRoleByIdRequest, opts ...client.CallOption) (*GetRoleByIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetRoleById", in)
	out := new(GetRoleByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*UpdateRoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.UpdateRole", in)
	out := new(UpdateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.DeleteRole", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAllPermissions(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetAllPermissionsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetAllPermissions", in)
	out := new(GetAllPermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SetPublicPermissions(ctx context.Context, in *SetPublicPermissionsRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.SetPublicPermissions", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetPrivatePermissions(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetPrivatePermissionsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetPrivatePermissions", in)
	out := new(GetPrivatePermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SetRolesforPrivatePermissions(ctx context.Context, in *SetRolesforPrivatePermissionsRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.SetRolesforPrivatePermissions", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUsersbyRole(ctx context.Context, in *GetUsersbyRoleRequest, opts ...client.CallOption) (*GetUsersbyRoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetUsersbyRole", in)
	out := new(GetUsersbyRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...client.CallOption) (*AuthorizeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Authorize", in)
	out := new(AuthorizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdatePermissionsFromOtherService(ctx context.Context, in *UpdatePermissionsFromOtherServiceRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.UpdatePermissionsFromOtherService", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	// Đăng ký tài khoản (cần có captcha chống spam)
	RegisterUser(context.Context, *RegisterUserRequest, *RegisterUserResponse) error
	// Đăng ký tài khoản qua Facebook
	RegisterUserByFacebook(context.Context, *RegisterUserByFacebookRequest, *RegisterUserByFacebookResponse) error
	// Đăng ký tài khoản qua Google
	RegisterUserByGoogle(context.Context, *RegisterUserByGoogleRequest, *RegisterUserByGoogleResponse) error
	// Đăng nhập (có khóa tài khoản nếu đăng nhập sai nhiều lần)
	Login(context.Context, *LoginRequest, *LoginResponse) error
	// Quên mật khẩu (gửi email reset mật khẩu)
	ForgotPassword(context.Context, *ForgotPasswordRequest, *ResultResponse) error
	// Reset mật khẩu (lấy đường dẫn trong email, kiểm tra tính hợp lệ của token trong đường dẫn)
	ResetPassword(context.Context, *ResetPasswordRequest, *ResultResponse) error
	// Gửi xác thực email (gửi email xác thực)
	SendVerifyEmail(context.Context, *SendVerifyEmailRequest, *ResultResponse) error
	// Xác thực email (lấy đường dẫn trong email, kiểm tra tính hợp lệ của token trong đường dẫn)
	VerifyEmail(context.Context, *VerifyEmailRequest, *ResultResponse) error
	// Lấy thông tin cá nhân
	GetProfile(context.Context, *EmptyRequest, *GetProfileResponse) error
	// Cập nhật thông tin cá nhân
	UpdateProfile(context.Context, *UpdateProfileRequest, *UpdateProfileResponse) error
	// Đổi mật khẩu
	ChangePassword(context.Context, *ChangePasswordRequest, *ResultResponse) error
	// Đổi email (cần xác thực email mới, dùng lại hàm VerifyEmail)
	ChangeEmail(context.Context, *ChangeEmailRequest, *ResultResponse) error
	// Tạo thêm thuộc tính cho User (user info)
	CreateUserProperty(context.Context, *CreateUserPropertyRequest, *ResultResponse) error
	// Lấy ra các thuộc tính cho User (user info)
	GetUserProperties(context.Context, *EmptyRequest, *GetUserPropertiesResponse) error
	// Tạo User
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	// Lấy danh sách User (có phân trang, sorting)
	GetUsers(context.Context, *GetUsersRequest, *GetUsersResponse) error
	// Tìm kiếm User theo từ khóa
	SearchUsers(context.Context, *SearchUsersRequest, *SearchUsersResponse) error
	// Lấy thông tin User theo Id
	GetUserById(context.Context, *GetUserByIdRequest, *GetUserByIdResponse) error
	// Lấy danh sách User theo danh sách Id
	GetUsersByIds(context.Context, *GetUsersByIdsRequest, *GetUsersByIdsResponse) error
	// Cập nhật thông tin User
	UpdateUser(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	// Xóa User (không được xóa tài khoản Super Admin)
	DeleteUser(context.Context, *DeleteUserRequest, *ResultResponse) error
	// Tạo Role
	CreateRole(context.Context, *CreateRoleRequest, *CreateRoleResponse) error
	// Lấy danh sách Role (có phân trang, sorting)
	GetRoles(context.Context, *GetRolesRequest, *GetRolesResponse) error
	// Lấy thông tin Role theo Id
	GetRoleById(context.Context, *GetRoleByIdRequest, *GetRoleByIdResponse) error
	// Cập nhật Role
	UpdateRole(context.Context, *UpdateRoleRequest, *UpdateRoleResponse) error
	// Xóa Role
	DeleteRole(context.Context, *DeleteRoleRequest, *ResultResponse) error
	// Lấy ra danh sách tất cả các Service và Method
	GetAllPermissions(context.Context, *EmptyRequest, *GetAllPermissionsResponse) error
	// Thiết lập chế độ Public cho các Service và Method
	SetPublicPermissions(context.Context, *SetPublicPermissionsRequest, *ResultResponse) error
	// Lấy ra danh sách các Service và Method ở chế độ Private
	GetPrivatePermissions(context.Context, *EmptyRequest, *GetPrivatePermissionsResponse) error
	// Thiết lập quyền cho các Service và Method ở chế độ Private
	SetRolesforPrivatePermissions(context.Context, *SetRolesforPrivatePermissionsRequest, *ResultResponse) error
	// Lọc User theo Role
	GetUsersbyRole(context.Context, *GetUsersbyRoleRequest, *GetUsersbyRoleResponse) error
	// Kiểm tra quyền truy cập vào một Method
	Authorize(context.Context, *AuthorizeRequest, *AuthorizeResponse) error
	// Khai báo các Service/Method từ Service-Video
	UpdatePermissionsFromOtherService(context.Context, *UpdatePermissionsFromOtherServiceRequest, *ResultResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Auth{hdlr}, opts...))
}

type Auth struct {
	AuthHandler
}

func (h *Auth) RegisterUser(ctx context.Context, in *RegisterUserRequest, out *RegisterUserResponse) error {
	return h.AuthHandler.RegisterUser(ctx, in, out)
}

func (h *Auth) RegisterUserByFacebook(ctx context.Context, in *RegisterUserByFacebookRequest, out *RegisterUserByFacebookResponse) error {
	return h.AuthHandler.RegisterUserByFacebook(ctx, in, out)
}

func (h *Auth) RegisterUserByGoogle(ctx context.Context, in *RegisterUserByGoogleRequest, out *RegisterUserByGoogleResponse) error {
	return h.AuthHandler.RegisterUserByGoogle(ctx, in, out)
}

func (h *Auth) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AuthHandler.Login(ctx, in, out)
}

func (h *Auth) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, out *ResultResponse) error {
	return h.AuthHandler.ForgotPassword(ctx, in, out)
}

func (h *Auth) ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *ResultResponse) error {
	return h.AuthHandler.ResetPassword(ctx, in, out)
}

func (h *Auth) SendVerifyEmail(ctx context.Context, in *SendVerifyEmailRequest, out *ResultResponse) error {
	return h.AuthHandler.SendVerifyEmail(ctx, in, out)
}

func (h *Auth) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, out *ResultResponse) error {
	return h.AuthHandler.VerifyEmail(ctx, in, out)
}

func (h *Auth) GetProfile(ctx context.Context, in *EmptyRequest, out *GetProfileResponse) error {
	return h.AuthHandler.GetProfile(ctx, in, out)
}

func (h *Auth) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, out *UpdateProfileResponse) error {
	return h.AuthHandler.UpdateProfile(ctx, in, out)
}

func (h *Auth) ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *ResultResponse) error {
	return h.AuthHandler.ChangePassword(ctx, in, out)
}

func (h *Auth) ChangeEmail(ctx context.Context, in *ChangeEmailRequest, out *ResultResponse) error {
	return h.AuthHandler.ChangeEmail(ctx, in, out)
}

func (h *Auth) CreateUserProperty(ctx context.Context, in *CreateUserPropertyRequest, out *ResultResponse) error {
	return h.AuthHandler.CreateUserProperty(ctx, in, out)
}

func (h *Auth) GetUserProperties(ctx context.Context, in *EmptyRequest, out *GetUserPropertiesResponse) error {
	return h.AuthHandler.GetUserProperties(ctx, in, out)
}

func (h *Auth) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.AuthHandler.CreateUser(ctx, in, out)
}

func (h *Auth) GetUsers(ctx context.Context, in *GetUsersRequest, out *GetUsersResponse) error {
	return h.AuthHandler.GetUsers(ctx, in, out)
}

func (h *Auth) SearchUsers(ctx context.Context, in *SearchUsersRequest, out *SearchUsersResponse) error {
	return h.AuthHandler.SearchUsers(ctx, in, out)
}

func (h *Auth) GetUserById(ctx context.Context, in *GetUserByIdRequest, out *GetUserByIdResponse) error {
	return h.AuthHandler.GetUserById(ctx, in, out)
}

func (h *Auth) GetUsersByIds(ctx context.Context, in *GetUsersByIdsRequest, out *GetUsersByIdsResponse) error {
	return h.AuthHandler.GetUsersByIds(ctx, in, out)
}

func (h *Auth) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.AuthHandler.UpdateUser(ctx, in, out)
}

func (h *Auth) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *ResultResponse) error {
	return h.AuthHandler.DeleteUser(ctx, in, out)
}

func (h *Auth) CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRoleResponse) error {
	return h.AuthHandler.CreateRole(ctx, in, out)
}

func (h *Auth) GetRoles(ctx context.Context, in *GetRolesRequest, out *GetRolesResponse) error {
	return h.AuthHandler.GetRoles(ctx, in, out)
}

func (h *Auth) GetRoleById(ctx context.Context, in *GetRoleByIdRequest, out *GetRoleByIdResponse) error {
	return h.AuthHandler.GetRoleById(ctx, in, out)
}

func (h *Auth) UpdateRole(ctx context.Context, in *UpdateRoleRequest, out *UpdateRoleResponse) error {
	return h.AuthHandler.UpdateRole(ctx, in, out)
}

func (h *Auth) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *ResultResponse) error {
	return h.AuthHandler.DeleteRole(ctx, in, out)
}

func (h *Auth) GetAllPermissions(ctx context.Context, in *EmptyRequest, out *GetAllPermissionsResponse) error {
	return h.AuthHandler.GetAllPermissions(ctx, in, out)
}

func (h *Auth) SetPublicPermissions(ctx context.Context, in *SetPublicPermissionsRequest, out *ResultResponse) error {
	return h.AuthHandler.SetPublicPermissions(ctx, in, out)
}

func (h *Auth) GetPrivatePermissions(ctx context.Context, in *EmptyRequest, out *GetPrivatePermissionsResponse) error {
	return h.AuthHandler.GetPrivatePermissions(ctx, in, out)
}

func (h *Auth) SetRolesforPrivatePermissions(ctx context.Context, in *SetRolesforPrivatePermissionsRequest, out *ResultResponse) error {
	return h.AuthHandler.SetRolesforPrivatePermissions(ctx, in, out)
}

func (h *Auth) GetUsersbyRole(ctx context.Context, in *GetUsersbyRoleRequest, out *GetUsersbyRoleResponse) error {
	return h.AuthHandler.GetUsersbyRole(ctx, in, out)
}

func (h *Auth) Authorize(ctx context.Context, in *AuthorizeRequest, out *AuthorizeResponse) error {
	return h.AuthHandler.Authorize(ctx, in, out)
}

func (h *Auth) UpdatePermissionsFromOtherService(ctx context.Context, in *UpdatePermissionsFromOtherServiceRequest, out *ResultResponse) error {
	return h.AuthHandler.UpdatePermissionsFromOtherService(ctx, in, out)
}
