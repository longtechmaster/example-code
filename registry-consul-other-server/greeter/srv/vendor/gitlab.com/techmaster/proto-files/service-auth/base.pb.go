// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base.proto

package auth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// Sắp xếp theo chiều nào
type Pagination_Direction int32

const (
	ASC  Pagination_Direction = 0
	DESC Pagination_Direction = 1
)

var Pagination_Direction_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}
var Pagination_Direction_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (Pagination_Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptorBase, []int{2, 0} }

// Request không có tham số
type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{0} }

// Response với mã trạng thái
type ResultResponse struct {
	// Kết quả trả về
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Thông báo lỗi
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ResultResponse) Reset()                    { *m = ResultResponse{} }
func (*ResultResponse) ProtoMessage()               {}
func (*ResultResponse) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{1} }

func (m *ResultResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ResultResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Thông tin phân trang
type Pagination struct {
	// Danh sách các cột cần lấy
	Columns []string `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	// Sắp xếp theo cột nào
	OrderByColumn    string               `protobuf:"bytes,2,opt,name=order_by_column,json=orderByColumn,proto3" json:"order_by_column,omitempty"`
	OrderByDirection Pagination_Direction `protobuf:"varint,3,opt,name=order_by_direction,json=orderByDirection,proto3,enum=auth.Pagination_Direction" json:"order_by_direction,omitempty"`
	// Trang hiện tại
	CurrentPage int32 `protobuf:"varint,4,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{2} }

func (m *Pagination) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Pagination) GetOrderByColumn() string {
	if m != nil {
		return m.OrderByColumn
	}
	return ""
}

func (m *Pagination) GetOrderByDirection() Pagination_Direction {
	if m != nil {
		return m.OrderByDirection
	}
	return ASC
}

func (m *Pagination) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

// Bảng lưu danh sách User
type User struct {
	// Mã User (chuỗi ngẫu nhiên duy nhất)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tên hiển thị
	FullName string `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// Tài khoản đăng nhập
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty" sql:",unique"`
	// Địa chỉ email
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty" sql:",unique"`
	// Mật khẩu phải có tối thiểu 6 ký tự
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Số điện thoại
	Phone string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty" sql:",unique"`
	// Ảnh đại diện
	Avatar string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// Mảng các quyền hạn (Role) của User (ví dụ [3, 5] tức là User có Role Id là 3 và 5).
	// Một User có thể có nhiều Role, nếu Null tức là User không có quyền gì
	Roles []int32 `protobuf:"varint,8,rep,packed,name=roles" json:"roles,omitempty" pg:",array"`
	// Email đã xác nhận (kích hoạt) hay chưa
	// True là đã xác nhận, False là chưa xác nhận, mặc định là False
	EmailConfirmed bool `protobuf:"varint,9,opt,name=email_confirmed,json=emailConfirmed,proto3" json:"email_confirmed,omitempty" sql:"default:false"`
	// Token để xác thực Email
	VerifyEmailToken string `protobuf:"bytes,10,opt,name=verify_email_token,json=verifyEmailToken,proto3" json:"verify_email_token,omitempty"`
	// Thời gian hiệu lực của Token xác thực email
	VerifyEmailTokenEnd time.Time `protobuf:"bytes,11,opt,name=verify_email_token_end,json=verifyEmailTokenEnd,stdtime" json:"verify_email_token_end"`
	// Token để reset password
	ResetPasswordToken string `protobuf:"bytes,12,opt,name=reset_password_token,json=resetPasswordToken,proto3" json:"reset_password_token,omitempty"`
	// Thời gian hiệu lực của Token reset password
	ResetPasswordTokenEnd time.Time `protobuf:"bytes,13,opt,name=reset_password_token_end,json=resetPasswordTokenEnd,stdtime" json:"reset_password_token_end"`
	// Số lần đăng nhập sai, mặc định là 0
	AccessFailedCount int32 `protobuf:"varint,14,opt,name=access_failed_count,json=accessFailedCount,proto3" json:"access_failed_count,omitempty" sql:"default:0"`
	// Thời gian khóa đăng nhập, mặc định là Null tức là không khóa
	// Sau X số lần đăng nhập sai có thể khóa User đăng nhập trong khoảng thời gian Y
	LockoutEnd time.Time `protobuf:"bytes,15,opt,name=lockout_end,json=lockoutEnd,stdtime" json:"lockout_end"`
	// Ngày tài khoản được tạo
	CreatedAt time.Time `protobuf:"bytes,16,opt,name=created_at,json=createdAt,stdtime" json:"created_at" sql:"default:now()"`
	// Id người tạo tài khoản, Null là người dùng tự đăng ký tài khoản
	CreatedBy string `protobuf:"bytes,17,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Ngày gần nhất tài khoản cập nhật thông tin
	ModifiedAt time.Time `protobuf:"bytes,18,opt,name=modified_at,json=modifiedAt,stdtime" json:"modified_at" sql:"default:now()"`
	// Người cập nhật thông tin tài khoản gần nhất
	ModifiedBy string `protobuf:"bytes,19,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	// Trạng thái của User
	// True là active, False là unactive, mặc định là True
	UserStatus bool `protobuf:"varint,20,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty" sql:"default:true"`
	// Thông tin thêm về User lưu dưới dạng JSON
	UserInfo []*UserInfo `protobuf:"bytes,21,rep,name=user_info,json=userInfo" json:"user_info,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{3} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *User) GetRoles() []int32 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *User) GetEmailConfirmed() bool {
	if m != nil {
		return m.EmailConfirmed
	}
	return false
}

func (m *User) GetVerifyEmailToken() string {
	if m != nil {
		return m.VerifyEmailToken
	}
	return ""
}

func (m *User) GetVerifyEmailTokenEnd() time.Time {
	if m != nil {
		return m.VerifyEmailTokenEnd
	}
	return time.Time{}
}

func (m *User) GetResetPasswordToken() string {
	if m != nil {
		return m.ResetPasswordToken
	}
	return ""
}

func (m *User) GetResetPasswordTokenEnd() time.Time {
	if m != nil {
		return m.ResetPasswordTokenEnd
	}
	return time.Time{}
}

func (m *User) GetAccessFailedCount() int32 {
	if m != nil {
		return m.AccessFailedCount
	}
	return 0
}

func (m *User) GetLockoutEnd() time.Time {
	if m != nil {
		return m.LockoutEnd
	}
	return time.Time{}
}

func (m *User) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *User) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *User) GetModifiedAt() time.Time {
	if m != nil {
		return m.ModifiedAt
	}
	return time.Time{}
}

func (m *User) GetModifiedBy() string {
	if m != nil {
		return m.ModifiedBy
	}
	return ""
}

func (m *User) GetUserStatus() bool {
	if m != nil {
		return m.UserStatus
	}
	return false
}

func (m *User) GetUserInfo() []*UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

// Mô tả chi tiết trường user_info
type UserInfo struct {
	// Mã User Property
	UserPropertyId int32 `protobuf:"varint,1,opt,name=user_property_id,json=userPropertyId,proto3" json:"user_property_id,omitempty" sql:",pk"`
	// Giá trị của Property
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{4} }

func (m *UserInfo) GetUserPropertyId() int32 {
	if m != nil {
		return m.UserPropertyId
	}
	return 0
}

func (m *UserInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Bảng lưu các thuộc tính thêm của User
type UserProperty struct {
	// Mã User Property
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" sql:",pk"`
	// Tên Property
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" sql:",unique"`
	// Kiểu dữ liệu của Property.
	// Nhận một trong các giá trị: Number, string, Datetime
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *UserProperty) Reset()                    { *m = UserProperty{} }
func (*UserProperty) ProtoMessage()               {}
func (*UserProperty) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{5} }

func (m *UserProperty) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserProperty) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserProperty) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// Thông tin hiển thị cho user thường (trang thông tin cá nhân)
type UserProfile struct {
	// Tên User
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// Địa chỉ email, dùng luôn làm tài khoản đăng nhập
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Email đã xác nhận (kích hoạt) hay chưa
	// True là đã xác nhận, False là chưa xác nhận, mặc định là False
	EmailConfirmed bool `protobuf:"varint,3,opt,name=email_confirmed,json=emailConfirmed,proto3" json:"email_confirmed,omitempty"`
	// Ảnh đại diện
	Avatar string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// Số điện thoại
	Phone string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	// Ngày tài khoản được tạo
	CreatedAt time.Time `protobuf:"bytes,6,opt,name=created_at,json=createdAt,stdtime" json:"created_at" sql:"default:now()"`
	// Thông tin thêm về User ví dụ Tiểu sử, học vấn, ...
	UserInfo []*UserInfo `protobuf:"bytes,7,rep,name=user_info,json=userInfo" json:"user_info,omitempty"`
}

func (m *UserProfile) Reset()                    { *m = UserProfile{} }
func (*UserProfile) ProtoMessage()               {}
func (*UserProfile) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{6} }

func (m *UserProfile) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *UserProfile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserProfile) GetEmailConfirmed() bool {
	if m != nil {
		return m.EmailConfirmed
	}
	return false
}

func (m *UserProfile) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserProfile) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserProfile) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *UserProfile) GetUserInfo() []*UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

// Bảng lưu danh sách Role
type Role struct {
	// Mã Role
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tên của quyền hạn (ví dụ 'Author')
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" sql:",unique"`
	// Mô tả quyền hạn
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{7} }

func (m *Role) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Bảng lưu quyền truy cập của các Role với các Method
type Permission struct {
	// Tên của service (ví dụ 'blog')
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty" sql:",pk"`
	// Các phương thức của service
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty" sql:",pk"`
	// Mảng các quyền hạn (Role) cho phép truy cập vào method (nếu null tức là public method)
	Roles []int32 `protobuf:"varint,3,rep,packed,name=roles" json:"roles,omitempty" pg:",array"`
	// Method có phải là public hay không
	IsPublic bool `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty" sql:"default:false"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{8} }

func (m *Permission) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Permission) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Permission) GetRoles() []int32 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Permission) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

// Sự kiện User thay đổi thông tin cá nhân
type UserChangeProfileEvent struct {
	// Mã User
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tên hiển thị
	FullName string `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// Ảnh đại diện
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *UserChangeProfileEvent) Reset()                    { *m = UserChangeProfileEvent{} }
func (*UserChangeProfileEvent) ProtoMessage()               {}
func (*UserChangeProfileEvent) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{9} }

func (m *UserChangeProfileEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserChangeProfileEvent) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *UserChangeProfileEvent) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "auth.EmptyRequest")
	proto.RegisterType((*ResultResponse)(nil), "auth.ResultResponse")
	proto.RegisterType((*Pagination)(nil), "auth.Pagination")
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*UserInfo)(nil), "auth.UserInfo")
	proto.RegisterType((*UserProperty)(nil), "auth.UserProperty")
	proto.RegisterType((*UserProfile)(nil), "auth.UserProfile")
	proto.RegisterType((*Role)(nil), "auth.Role")
	proto.RegisterType((*Permission)(nil), "auth.Permission")
	proto.RegisterType((*UserChangeProfileEvent)(nil), "auth.UserChangeProfileEvent")
	proto.RegisterEnum("auth.Pagination_Direction", Pagination_Direction_name, Pagination_Direction_value)
}
func (x Pagination_Direction) String() string {
	s, ok := Pagination_Direction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *EmptyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmptyRequest)
	if !ok {
		that2, ok := that.(EmptyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResultResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResultResponse)
	if !ok {
		that2, ok := that.(ResultResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Pagination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pagination)
	if !ok {
		that2, ok := that.(Pagination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if this.Columns[i] != that1.Columns[i] {
			return false
		}
	}
	if this.OrderByColumn != that1.OrderByColumn {
		return false
	}
	if this.OrderByDirection != that1.OrderByDirection {
		return false
	}
	if this.CurrentPage != that1.CurrentPage {
		return false
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.FullName != that1.FullName {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if this.EmailConfirmed != that1.EmailConfirmed {
		return false
	}
	if this.VerifyEmailToken != that1.VerifyEmailToken {
		return false
	}
	if !this.VerifyEmailTokenEnd.Equal(that1.VerifyEmailTokenEnd) {
		return false
	}
	if this.ResetPasswordToken != that1.ResetPasswordToken {
		return false
	}
	if !this.ResetPasswordTokenEnd.Equal(that1.ResetPasswordTokenEnd) {
		return false
	}
	if this.AccessFailedCount != that1.AccessFailedCount {
		return false
	}
	if !this.LockoutEnd.Equal(that1.LockoutEnd) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.CreatedBy != that1.CreatedBy {
		return false
	}
	if !this.ModifiedAt.Equal(that1.ModifiedAt) {
		return false
	}
	if this.ModifiedBy != that1.ModifiedBy {
		return false
	}
	if this.UserStatus != that1.UserStatus {
		return false
	}
	if len(this.UserInfo) != len(that1.UserInfo) {
		return false
	}
	for i := range this.UserInfo {
		if !this.UserInfo[i].Equal(that1.UserInfo[i]) {
			return false
		}
	}
	return true
}
func (this *UserInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserInfo)
	if !ok {
		that2, ok := that.(UserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserPropertyId != that1.UserPropertyId {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *UserProperty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserProperty)
	if !ok {
		that2, ok := that.(UserProperty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *UserProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserProfile)
	if !ok {
		that2, ok := that.(UserProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FullName != that1.FullName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.EmailConfirmed != that1.EmailConfirmed {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.UserInfo) != len(that1.UserInfo) {
		return false
	}
	for i := range this.UserInfo {
		if !this.UserInfo[i].Equal(that1.UserInfo[i]) {
			return false
		}
	}
	return true
}
func (this *Role) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Role)
	if !ok {
		that2, ok := that.(Role)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *Permission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Permission)
	if !ok {
		that2, ok := that.(Permission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if this.IsPublic != that1.IsPublic {
		return false
	}
	return true
}
func (this *UserChangeProfileEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserChangeProfileEvent)
	if !ok {
		that2, ok := that.(UserChangeProfileEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.FullName != that1.FullName {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	return true
}
func (this *EmptyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&auth.EmptyRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResultResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auth.ResultResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pagination) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&auth.Pagination{")
	s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	s = append(s, "OrderByColumn: "+fmt.Sprintf("%#v", this.OrderByColumn)+",\n")
	s = append(s, "OrderByDirection: "+fmt.Sprintf("%#v", this.OrderByDirection)+",\n")
	s = append(s, "CurrentPage: "+fmt.Sprintf("%#v", this.CurrentPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&auth.User{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FullName: "+fmt.Sprintf("%#v", this.FullName)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "Roles: "+fmt.Sprintf("%#v", this.Roles)+",\n")
	s = append(s, "EmailConfirmed: "+fmt.Sprintf("%#v", this.EmailConfirmed)+",\n")
	s = append(s, "VerifyEmailToken: "+fmt.Sprintf("%#v", this.VerifyEmailToken)+",\n")
	s = append(s, "VerifyEmailTokenEnd: "+fmt.Sprintf("%#v", this.VerifyEmailTokenEnd)+",\n")
	s = append(s, "ResetPasswordToken: "+fmt.Sprintf("%#v", this.ResetPasswordToken)+",\n")
	s = append(s, "ResetPasswordTokenEnd: "+fmt.Sprintf("%#v", this.ResetPasswordTokenEnd)+",\n")
	s = append(s, "AccessFailedCount: "+fmt.Sprintf("%#v", this.AccessFailedCount)+",\n")
	s = append(s, "LockoutEnd: "+fmt.Sprintf("%#v", this.LockoutEnd)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "CreatedBy: "+fmt.Sprintf("%#v", this.CreatedBy)+",\n")
	s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	s = append(s, "ModifiedBy: "+fmt.Sprintf("%#v", this.ModifiedBy)+",\n")
	s = append(s, "UserStatus: "+fmt.Sprintf("%#v", this.UserStatus)+",\n")
	if this.UserInfo != nil {
		s = append(s, "UserInfo: "+fmt.Sprintf("%#v", this.UserInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auth.UserInfo{")
	s = append(s, "UserPropertyId: "+fmt.Sprintf("%#v", this.UserPropertyId)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserProperty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auth.UserProperty{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&auth.UserProfile{")
	s = append(s, "FullName: "+fmt.Sprintf("%#v", this.FullName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "EmailConfirmed: "+fmt.Sprintf("%#v", this.EmailConfirmed)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	if this.UserInfo != nil {
		s = append(s, "UserInfo: "+fmt.Sprintf("%#v", this.UserInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Role) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auth.Role{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Permission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&auth.Permission{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Roles: "+fmt.Sprintf("%#v", this.Roles)+",\n")
	s = append(s, "IsPublic: "+fmt.Sprintf("%#v", this.IsPublic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserChangeProfileEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auth.UserChangeProfileEvent{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FullName: "+fmt.Sprintf("%#v", this.FullName)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBase(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EmptyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Pagination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pagination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.OrderByColumn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.OrderByColumn)))
		i += copy(dAtA[i:], m.OrderByColumn)
	}
	if m.OrderByDirection != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.OrderByDirection))
	}
	if m.CurrentPage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.CurrentPage))
	}
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.FullName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.FullName)))
		i += copy(dAtA[i:], m.FullName)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if len(m.Roles) > 0 {
		dAtA2 := make([]byte, len(m.Roles)*10)
		var j1 int
		for _, num1 := range m.Roles {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintBase(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.EmailConfirmed {
		dAtA[i] = 0x48
		i++
		if m.EmailConfirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.VerifyEmailToken) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.VerifyEmailToken)))
		i += copy(dAtA[i:], m.VerifyEmailToken)
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.VerifyEmailTokenEnd)))
	n3, err := types.StdTimeMarshalTo(m.VerifyEmailTokenEnd, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.ResetPasswordToken) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.ResetPasswordToken)))
		i += copy(dAtA[i:], m.ResetPasswordToken)
	}
	dAtA[i] = 0x6a
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.ResetPasswordTokenEnd)))
	n4, err := types.StdTimeMarshalTo(m.ResetPasswordTokenEnd, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.AccessFailedCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.AccessFailedCount))
	}
	dAtA[i] = 0x7a
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.LockoutEnd)))
	n5, err := types.StdTimeMarshalTo(m.LockoutEnd, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n6, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.CreatedBy) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.CreatedBy)))
		i += copy(dAtA[i:], m.CreatedBy)
	}
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.ModifiedAt)))
	n7, err := types.StdTimeMarshalTo(m.ModifiedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.ModifiedBy) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.ModifiedBy)))
		i += copy(dAtA[i:], m.ModifiedBy)
	}
	if m.UserStatus {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.UserStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserInfo) > 0 {
		for _, msg := range m.UserInfo {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintBase(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserPropertyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.UserPropertyId))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *UserProperty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProperty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *UserProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FullName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.FullName)))
		i += copy(dAtA[i:], m.FullName)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.EmailConfirmed {
		dAtA[i] = 0x18
		i++
		if m.EmailConfirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n8, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.UserInfo) > 0 {
		for _, msg := range m.UserInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintBase(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *Permission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Roles) > 0 {
		dAtA10 := make([]byte, len(m.Roles)*10)
		var j9 int
		for _, num1 := range m.Roles {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.IsPublic {
		dAtA[i] = 0x20
		i++
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UserChangeProfileEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserChangeProfileEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.FullName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.FullName)))
		i += copy(dAtA[i:], m.FullName)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	return i, nil
}

func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EmptyRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResultResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *Pagination) Size() (n int) {
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	l = len(m.OrderByColumn)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.OrderByDirection != 0 {
		n += 1 + sovBase(uint64(m.OrderByDirection))
	}
	if m.CurrentPage != 0 {
		n += 1 + sovBase(uint64(m.CurrentPage))
	}
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovBase(uint64(e))
		}
		n += 1 + sovBase(uint64(l)) + l
	}
	if m.EmailConfirmed {
		n += 2
	}
	l = len(m.VerifyEmailToken)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = types.SizeOfStdTime(m.VerifyEmailTokenEnd)
	n += 1 + l + sovBase(uint64(l))
	l = len(m.ResetPasswordToken)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = types.SizeOfStdTime(m.ResetPasswordTokenEnd)
	n += 1 + l + sovBase(uint64(l))
	if m.AccessFailedCount != 0 {
		n += 1 + sovBase(uint64(m.AccessFailedCount))
	}
	l = types.SizeOfStdTime(m.LockoutEnd)
	n += 1 + l + sovBase(uint64(l))
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 2 + l + sovBase(uint64(l))
	l = len(m.CreatedBy)
	if l > 0 {
		n += 2 + l + sovBase(uint64(l))
	}
	l = types.SizeOfStdTime(m.ModifiedAt)
	n += 2 + l + sovBase(uint64(l))
	l = len(m.ModifiedBy)
	if l > 0 {
		n += 2 + l + sovBase(uint64(l))
	}
	if m.UserStatus {
		n += 3
	}
	if len(m.UserInfo) > 0 {
		for _, e := range m.UserInfo {
			l = e.Size()
			n += 2 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserPropertyId != 0 {
		n += 1 + sovBase(uint64(m.UserPropertyId))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *UserProperty) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBase(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *UserProfile) Size() (n int) {
	var l int
	_ = l
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.EmailConfirmed {
		n += 2
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovBase(uint64(l))
	if len(m.UserInfo) > 0 {
		for _, e := range m.UserInfo {
			l = e.Size()
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *Role) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBase(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *Permission) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovBase(uint64(e))
		}
		n += 1 + sovBase(uint64(l)) + l
	}
	if m.IsPublic {
		n += 2
	}
	return n
}

func (m *UserChangeProfileEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func sovBase(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EmptyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmptyRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ResultResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResultResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pagination) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pagination{`,
		`Columns:` + fmt.Sprintf("%v", this.Columns) + `,`,
		`OrderByColumn:` + fmt.Sprintf("%v", this.OrderByColumn) + `,`,
		`OrderByDirection:` + fmt.Sprintf("%v", this.OrderByDirection) + `,`,
		`CurrentPage:` + fmt.Sprintf("%v", this.CurrentPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`FullName:` + fmt.Sprintf("%v", this.FullName) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`EmailConfirmed:` + fmt.Sprintf("%v", this.EmailConfirmed) + `,`,
		`VerifyEmailToken:` + fmt.Sprintf("%v", this.VerifyEmailToken) + `,`,
		`VerifyEmailTokenEnd:` + strings.Replace(strings.Replace(this.VerifyEmailTokenEnd.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`ResetPasswordToken:` + fmt.Sprintf("%v", this.ResetPasswordToken) + `,`,
		`ResetPasswordTokenEnd:` + strings.Replace(strings.Replace(this.ResetPasswordTokenEnd.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`AccessFailedCount:` + fmt.Sprintf("%v", this.AccessFailedCount) + `,`,
		`LockoutEnd:` + strings.Replace(strings.Replace(this.LockoutEnd.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`CreatedBy:` + fmt.Sprintf("%v", this.CreatedBy) + `,`,
		`ModifiedAt:` + strings.Replace(strings.Replace(this.ModifiedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`ModifiedBy:` + fmt.Sprintf("%v", this.ModifiedBy) + `,`,
		`UserStatus:` + fmt.Sprintf("%v", this.UserStatus) + `,`,
		`UserInfo:` + strings.Replace(fmt.Sprintf("%v", this.UserInfo), "UserInfo", "UserInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserInfo{`,
		`UserPropertyId:` + fmt.Sprintf("%v", this.UserPropertyId) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserProperty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserProperty{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserProfile{`,
		`FullName:` + fmt.Sprintf("%v", this.FullName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`EmailConfirmed:` + fmt.Sprintf("%v", this.EmailConfirmed) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`UserInfo:` + strings.Replace(fmt.Sprintf("%v", this.UserInfo), "UserInfo", "UserInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Role) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Role{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Permission) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Permission{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`IsPublic:` + fmt.Sprintf("%v", this.IsPublic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserChangeProfileEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserChangeProfileEvent{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`FullName:` + fmt.Sprintf("%v", this.FullName) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBase(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EmptyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pagination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pagination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pagination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderByColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderByColumn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderByDirection", wireType)
			}
			m.OrderByDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderByDirection |= (Pagination_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBase
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailConfirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmailConfirmed = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyEmailToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifyEmailToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyEmailTokenEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.VerifyEmailTokenEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetPasswordToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResetPasswordToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetPasswordTokenEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ResetPasswordTokenEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessFailedCount", wireType)
			}
			m.AccessFailedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessFailedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockoutEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.LockoutEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ModifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModifiedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserStatus = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfo = append(m.UserInfo, &UserInfo{})
			if err := m.UserInfo[len(m.UserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPropertyId", wireType)
			}
			m.UserPropertyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserPropertyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProperty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProperty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProperty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailConfirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmailConfirmed = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfo = append(m.UserInfo, &UserInfo{})
			if err := m.UserInfo[len(m.UserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBase
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserChangeProfileEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserChangeProfileEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserChangeProfileEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBase
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBase(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBase = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("base.proto", fileDescriptorBase) }

var fileDescriptorBase = []byte{
	// 1096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x16, 0x2d, 0xc9, 0x96, 0x46, 0xb6, 0xac, 0xac, 0x1d, 0xff, 0x84, 0x7f, 0x84, 0x52, 0x09,
	0xb8, 0x56, 0x51, 0x47, 0x09, 0xdc, 0x02, 0x01, 0x7c, 0xaa, 0xa5, 0xa8, 0x68, 0x2e, 0x85, 0x41,
	0x27, 0x87, 0x14, 0x0d, 0x88, 0x15, 0xb9, 0x92, 0x08, 0x93, 0x5c, 0x7a, 0x77, 0xe9, 0x80, 0xb7,
	0x3e, 0x42, 0x1e, 0xa1, 0xc7, 0xbe, 0x42, 0xdf, 0x20, 0xc7, 0xdc, 0x5a, 0xa0, 0x80, 0x5a, 0xab,
	0x97, 0x1e, 0x03, 0x3d, 0x41, 0xb1, 0x4b, 0x52, 0xb2, 0x6c, 0x37, 0x81, 0xd1, 0xde, 0x38, 0x33,
	0xdf, 0x7e, 0xfb, 0x61, 0x76, 0xf8, 0x0d, 0xc0, 0x00, 0x73, 0xd2, 0x89, 0x18, 0x15, 0x14, 0x95,
	0x70, 0x2c, 0xc6, 0xbb, 0x0f, 0x47, 0x9e, 0x18, 0xc7, 0x83, 0x8e, 0x43, 0x83, 0x47, 0x23, 0x3a,
	0xa2, 0x8f, 0x54, 0x71, 0x10, 0x0f, 0x55, 0xa4, 0x02, 0xf5, 0x95, 0x1e, 0xda, 0x6d, 0x8e, 0x28,
	0x1d, 0xf9, 0x64, 0x81, 0x12, 0x5e, 0x40, 0xb8, 0xc0, 0x41, 0x94, 0x02, 0xcc, 0x3a, 0xac, 0xf7,
	0x83, 0x48, 0x24, 0x16, 0x39, 0x8f, 0x09, 0x17, 0x66, 0x17, 0xea, 0x16, 0xe1, 0xb1, 0x2f, 0x2c,
	0xc2, 0x23, 0x1a, 0x72, 0x82, 0x76, 0x60, 0x95, 0x0b, 0x2c, 0x62, 0xae, 0x6b, 0x2d, 0xad, 0x5d,
	0xb1, 0xb2, 0x08, 0xe9, 0xb0, 0x16, 0x10, 0xce, 0xf1, 0x88, 0xe8, 0x2b, 0x2d, 0xad, 0x5d, 0xb5,
	0xf2, 0xd0, 0xfc, 0x4d, 0x03, 0x38, 0xc1, 0x23, 0x2f, 0xc4, 0xc2, 0xa3, 0xa1, 0x04, 0x3a, 0xd4,
	0x8f, 0x83, 0x50, 0x32, 0x14, 0x25, 0x30, 0x0b, 0xd1, 0xa7, 0xb0, 0x49, 0x99, 0x4b, 0x98, 0x3d,
	0x48, 0xec, 0x34, 0x97, 0x51, 0x6d, 0xa8, 0x74, 0x37, 0xe9, 0xa9, 0x24, 0xfa, 0x06, 0xd0, 0x1c,
	0xe7, 0x7a, 0x8c, 0x38, 0x92, 0x57, 0x2f, 0xb6, 0xb4, 0x76, 0xfd, 0x70, 0xb7, 0x23, 0xfb, 0xd2,
	0x59, 0xdc, 0xd7, 0x79, 0x9a, 0x23, 0xac, 0x46, 0x46, 0x33, 0xcf, 0xa0, 0x4f, 0x60, 0xdd, 0x89,
	0x19, 0x23, 0xa1, 0xb0, 0x23, 0xa9, 0xbc, 0xd4, 0xd2, 0xda, 0x65, 0xab, 0x96, 0xe5, 0x4e, 0xa4,
	0x7a, 0x03, 0xaa, 0x0b, 0xfc, 0x1a, 0x14, 0x8f, 0x4f, 0x7b, 0x8d, 0x02, 0xaa, 0x40, 0xe9, 0x69,
	0xff, 0xb4, 0xd7, 0xd0, 0xcc, 0x5f, 0x2a, 0x50, 0x7a, 0xc1, 0x09, 0x43, 0x75, 0x58, 0xf1, 0x5c,
	0xd5, 0x94, 0xaa, 0xb5, 0xe2, 0xb9, 0xe8, 0xff, 0x50, 0x1d, 0xc6, 0xbe, 0x6f, 0x87, 0x38, 0xc8,
	0x5b, 0x52, 0x91, 0x89, 0x6f, 0x71, 0x40, 0xd0, 0x43, 0xa8, 0xc4, 0x9c, 0x30, 0x55, 0x93, 0xc2,
	0xab, 0xdd, 0x7b, 0xb3, 0x49, 0x73, 0x83, 0x9f, 0xfb, 0x47, 0xe6, 0x41, 0x1c, 0x7a, 0xe7, 0x31,
	0x31, 0xad, 0x39, 0x04, 0xed, 0x43, 0x99, 0x04, 0xd8, 0xf3, 0x95, 0xc0, 0x5b, 0xb1, 0x69, 0x1d,
	0xed, 0x42, 0x25, 0xc2, 0x9c, 0xbf, 0xa6, 0xcc, 0xd5, 0xcb, 0xe9, 0x9d, 0x79, 0x2c, 0x49, 0xa2,
	0x31, 0x0d, 0x89, 0xbe, 0xfa, 0x8f, 0x24, 0xaa, 0x2e, 0x9f, 0x18, 0x5f, 0x60, 0x81, 0x99, 0xbe,
	0xa6, 0x28, 0xb2, 0x08, 0xed, 0x41, 0x99, 0x51, 0x9f, 0x70, 0xbd, 0xd2, 0x2a, 0xb6, 0xcb, 0xdd,
	0xcd, 0xd9, 0xa4, 0x59, 0x8b, 0x46, 0x47, 0xe6, 0x01, 0x66, 0x0c, 0x27, 0xa6, 0x95, 0x56, 0xd1,
	0x57, 0xb0, 0xa9, 0xc4, 0xd8, 0x0e, 0x0d, 0x87, 0x1e, 0x0b, 0x88, 0xab, 0x57, 0xe5, 0xa8, 0x74,
	0xff, 0x37, 0x9b, 0x34, 0xb7, 0xd4, 0x8d, 0x2e, 0x19, 0xe2, 0xd8, 0x17, 0x47, 0x43, 0xec, 0x73,
	0x62, 0x5a, 0x75, 0x85, 0xef, 0xe5, 0x70, 0x74, 0x00, 0xe8, 0x82, 0x30, 0x6f, 0x98, 0xd8, 0x29,
	0x91, 0xa0, 0x67, 0x24, 0xd4, 0x41, 0x89, 0x69, 0xa4, 0x95, 0xbe, 0x2c, 0x3c, 0x97, 0x79, 0xf4,
	0x12, 0x76, 0x6e, 0xa2, 0x6d, 0x12, 0xba, 0x7a, 0xad, 0xa5, 0xb5, 0x6b, 0x87, 0xbb, 0x9d, 0x74,
	0xea, 0x3b, 0xf9, 0xd4, 0x77, 0x9e, 0xe7, 0x53, 0xdf, 0xad, 0xbc, 0x9d, 0x34, 0x0b, 0x6f, 0x7e,
	0x6f, 0x6a, 0xd6, 0xd6, 0x75, 0xde, 0x7e, 0xe8, 0xa2, 0xc7, 0xb0, 0xcd, 0x08, 0x27, 0x72, 0x3a,
	0xd2, 0x26, 0x66, 0x52, 0xd6, 0x95, 0x14, 0xa4, 0x6a, 0x27, 0x59, 0x29, 0x15, 0xf3, 0x0a, 0xf4,
	0xdb, 0x4e, 0x28, 0x39, 0x1b, 0x77, 0x90, 0x73, 0xff, 0x26, 0xb7, 0x14, 0xd4, 0x83, 0x2d, 0xec,
	0x38, 0x84, 0x73, 0x7b, 0x88, 0x3d, 0x9f, 0xb8, 0xb6, 0x43, 0xe3, 0x50, 0xe8, 0x75, 0x39, 0xb7,
	0xdd, 0xad, 0xd9, 0xa4, 0xb9, 0xb9, 0xd4, 0xdf, 0xc7, 0xa6, 0x75, 0x2f, 0xc5, 0x7f, 0xad, 0xe0,
	0x3d, 0x89, 0x46, 0x7d, 0xa8, 0xf9, 0xd4, 0x39, 0xa3, 0xb1, 0x50, 0xb2, 0x36, 0xef, 0x20, 0x0b,
	0xb2, 0x83, 0x52, 0xcb, 0x77, 0x00, 0x0e, 0x23, 0x58, 0x10, 0xd7, 0xc6, 0x42, 0x6f, 0x7c, 0x94,
	0xa5, 0x29, 0x59, 0x6e, 0x8c, 0x40, 0x48, 0x5f, 0xb7, 0x3f, 0x33, 0x15, 0x79, 0x35, 0xa3, 0x3b,
	0x16, 0xe8, 0xc1, 0x82, 0x7b, 0x90, 0xe8, 0xf7, 0x54, 0xbb, 0xf3, 0x72, 0x37, 0x41, 0xdf, 0x43,
	0x2d, 0xa0, 0xae, 0x37, 0xf4, 0xd2, 0xbb, 0xd1, 0xbf, 0xbf, 0x1b, 0x72, 0xbe, 0x63, 0x81, 0x9a,
	0x57, 0xd8, 0x07, 0x89, 0xbe, 0xa5, 0x6e, 0x9f, 0x03, 0xba, 0x09, 0x7a, 0x02, 0x35, 0xf9, 0x6b,
	0xda, 0x99, 0x11, 0x6e, 0xab, 0xe9, 0xde, 0x99, 0x4d, 0x9a, 0x68, 0x89, 0x5e, 0x30, 0xf9, 0x53,
	0x81, 0x84, 0x9e, 0xa6, 0x26, 0xf9, 0x39, 0x54, 0xd5, 0x41, 0x2f, 0x1c, 0x52, 0xfd, 0x7e, 0xab,
	0xd8, 0xae, 0x1d, 0xd6, 0x53, 0xc3, 0x92, 0x16, 0xf2, 0x2c, 0x1c, 0xd2, 0xf4, 0xa7, 0x97, 0x5f,
	0xe6, 0x4b, 0xa8, 0xe4, 0x59, 0xf4, 0x04, 0x1a, 0xea, 0x60, 0xc4, 0x68, 0x44, 0x98, 0x48, 0xec,
	0xcc, 0x6a, 0xca, 0xdd, 0x8d, 0xd9, 0xa4, 0x59, 0x4d, 0x7f, 0xe3, 0xe8, 0xcc, 0xb4, 0xea, 0x12,
	0x76, 0x92, 0xa1, 0x9e, 0xb9, 0x68, 0x1b, 0xca, 0x17, 0xd8, 0x8f, 0x73, 0x07, 0x4a, 0x03, 0x73,
	0x0c, 0xeb, 0x2f, 0xae, 0xe0, 0xd0, 0x83, 0xb9, 0x77, 0xdd, 0x20, 0x94, 0x56, 0xb6, 0x07, 0xa5,
	0x85, 0x8b, 0xdd, 0x66, 0x1c, 0xaa, 0x8c, 0x10, 0x94, 0x44, 0x12, 0x65, 0x86, 0x66, 0xa9, 0x6f,
	0xf3, 0xc7, 0x15, 0xa8, 0x65, 0x57, 0x0d, 0x3d, 0x9f, 0x2c, 0xbb, 0xa2, 0x76, 0xcd, 0x15, 0xb7,
	0x73, 0x9b, 0xcb, 0xc4, 0xa6, 0x9e, 0xb6, 0x7f, 0xd3, 0x4f, 0x8a, 0x6a, 0xf5, 0x5c, 0xb7, 0x8d,
	0x85, 0x6f, 0x95, 0x96, 0x7c, 0x6b, 0x3b, 0x37, 0xbe, 0xd4, 0x11, 0x33, 0x97, 0x5b, 0x1e, 0xdf,
	0xd5, 0xff, 0x74, 0x7c, 0x97, 0xde, 0x79, 0xed, 0x23, 0xef, 0x6c, 0x43, 0xc9, 0xa2, 0x3e, 0xb9,
	0xb2, 0x40, 0xca, 0x77, 0xe9, 0x7a, 0x0b, 0x6a, 0x2e, 0xe1, 0x0e, 0xf3, 0xa2, 0xf9, 0x1a, 0xac,
	0x5a, 0x57, 0x53, 0xe6, 0xcf, 0x72, 0x01, 0x13, 0x16, 0x78, 0x9c, 0xcb, 0x25, 0xb6, 0x0f, 0x6b,
	0x9c, 0xb0, 0x0b, 0xcf, 0xc9, 0x1e, 0xe0, 0xfa, 0x8b, 0xe7, 0x55, 0xb4, 0x07, 0xab, 0x01, 0x11,
	0x63, 0xea, 0x66, 0x12, 0xae, 0xe1, 0xb2, 0xe2, 0x62, 0x2d, 0x14, 0x3f, 0xb8, 0x16, 0xbe, 0x84,
	0xaa, 0xc7, 0xed, 0x28, 0x1e, 0xf8, 0x9e, 0xa3, 0x1e, 0xe8, 0x03, 0x0b, 0xa1, 0xe2, 0xf1, 0x13,
	0x05, 0x34, 0x5f, 0xc1, 0x8e, 0x6c, 0x59, 0x6f, 0x8c, 0xc3, 0x11, 0xc9, 0x86, 0xa8, 0x7f, 0x41,
	0x42, 0x71, 0xb7, 0x7d, 0xbb, 0x18, 0x8d, 0xe2, 0xd5, 0xd1, 0xe8, 0x1e, 0xbc, 0xbb, 0x34, 0x0a,
	0xbf, 0x5e, 0x1a, 0x85, 0xf7, 0x97, 0x86, 0xf6, 0xc3, 0xd4, 0xd0, 0x7e, 0x9a, 0x1a, 0xda, 0xdb,
	0xa9, 0xa1, 0xbd, 0x9b, 0x1a, 0xda, 0x1f, 0x53, 0x43, 0xfb, 0x6b, 0x6a, 0x14, 0xde, 0x4f, 0x0d,
	0xed, 0xcd, 0x9f, 0x46, 0x61, 0xb0, 0xaa, 0xc6, 0xe2, 0x8b, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x42, 0x9a, 0xc6, 0xfa, 0x88, 0x09, 0x00, 0x00,
}
