// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base.proto

package blog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// Sắp xếp theo chiều nào
type Pagination_Direction int32

const (
	ASC  Pagination_Direction = 0
	DESC Pagination_Direction = 1
)

var Pagination_Direction_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}
var Pagination_Direction_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (Pagination_Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptorBase, []int{2, 0} }

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{0} }

// Response với Id trạng thái
type ResultResponse struct {
	// Kết quả trả về
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Thông báo lỗi
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ResultResponse) Reset()                    { *m = ResultResponse{} }
func (*ResultResponse) ProtoMessage()               {}
func (*ResultResponse) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{1} }

func (m *ResultResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ResultResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Thông tin phân trang
type Pagination struct {
	// Danh sách các cột cần lấy
	Columns []string `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	// Sắp xếp theo cột nào
	OrderByColumn    string               `protobuf:"bytes,2,opt,name=order_by_column,json=orderByColumn,proto3" json:"order_by_column,omitempty"`
	OrderByDirection Pagination_Direction `protobuf:"varint,3,opt,name=order_by_direction,json=orderByDirection,proto3,enum=blog.Pagination_Direction" json:"order_by_direction,omitempty"`
	// Trang hiện tại
	CurrentPage int32 `protobuf:"varint,4,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{2} }

func (m *Pagination) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Pagination) GetOrderByColumn() string {
	if m != nil {
		return m.OrderByColumn
	}
	return ""
}

func (m *Pagination) GetOrderByDirection() Pagination_Direction {
	if m != nil {
		return m.OrderByDirection
	}
	return ASC
}

func (m *Pagination) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

// Bảng lưu danh sách Category
type Category struct {
	// Id Category
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tên hiển thị của Category
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" sql:",unique"`
	// Tên hiển thị trên đường dẫn
	Slug string `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty" sql:",unique"`
	// Icon của Category
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	// Mô tả Category
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Số lượng bài viết
	PostCount int32 `protobuf:"varint,6,opt,name=post_count,json=postCount,proto3" json:"post_count,omitempty"`
}

func (m *Category) Reset()                    { *m = Category{} }
func (*Category) ProtoMessage()               {}
func (*Category) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{3} }

func (m *Category) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Category) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Category) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Category) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Category) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Category) GetPostCount() int32 {
	if m != nil {
		return m.PostCount
	}
	return 0
}

// Bảng lưu danh sách Tag
type Tag struct {
	// Id Tag (uuid)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tên hiển thị của Tag
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Tên hiển thị trên đường dẫn
	Slug string `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	// Icon của Tag
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	// Số lượng bài viết sử dụng
	PostCount int32 `protobuf:"varint,5,opt,name=post_count,json=postCount,proto3" json:"post_count,omitempty"`
	// Thời điểm tạo Tag
	CreatedAt time.Time `protobuf:"bytes,6,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	// Người tạo
	CreatedBy string `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{4} }

func (m *Tag) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tag) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Tag) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Tag) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Tag) GetPostCount() int32 {
	if m != nil {
		return m.PostCount
	}
	return 0
}

func (m *Tag) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Tag) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

// Bảng lưu danh sách Post
type Post struct {
	// Id bài viết (uuid)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Id danh mục
	CategoryId int32    `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Category   Category `protobuf:"bytes,22,opt,name=category" json:"category"`
	// Id tác giả
	AuthorId string `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	// Họ tên tác giả
	AuthorName string `protobuf:"bytes,4,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	// Avatar tác giả
	AuthorAvatar string `protobuf:"bytes,5,opt,name=author_avatar,json=authorAvatar,proto3" json:"author_avatar,omitempty"`
	// Mảng các tag
	TagIds []string `protobuf:"bytes,6,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty" pg:",array"`
	// Tiêu đề bài viết
	Title string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	// Tên hiển thị trên đường dẫn (chuẩn hóa lại tiêu đề theo URL)
	Slug string `protobuf:"bytes,8,opt,name=slug,proto3" json:"slug,omitempty"`
	// Mô tả ngắn gọn của bài viết
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// Nội dung bài viết dưới dạng HTML
	ContentHtml string `protobuf:"bytes,10,opt,name=content_html,json=contentHtml,proto3" json:"content_html,omitempty"`
	// Nội dung bài viết dưới dạng Markdown
	ContentMarkdown string `protobuf:"bytes,11,opt,name=content_markdown,json=contentMarkdown,proto3" json:"content_markdown,omitempty"`
	// Ảnh dại diện
	Thumbnail string `protobuf:"bytes,12,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	// Tổng điểm Vote
	VoteScore int32 `protobuf:"varint,13,opt,name=vote_score,json=voteScore,proto3" json:"vote_score,omitempty"`
	// Số lượng bookmark
	BookmarkCount int32 `protobuf:"varint,14,opt,name=bookmark_count,json=bookmarkCount,proto3" json:"bookmark_count,omitempty"`
	// Số lượt view
	ViewCount int32 `protobuf:"varint,15,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	// Trạng thái của bài viết: Draft=0, Chờ kiểm duyệt=1  và Publish=2
	Status int32 `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	// Bài viết có hiển thị tên tác giả hay không (ẩn danh)
	IsAnonymous bool `protobuf:"varint,17,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty" sql:"default:false"`
	// Ngày xuất bản
	PublishedAt time.Time `protobuf:"bytes,18,opt,name=published_at,json=publishedAt,stdtime" json:"published_at"`
	// Thời điểm tạo bài viết
	CreatedAt time.Time `protobuf:"bytes,19,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	// Thời điểm chỉnh sửa cuối cùng
	ModifiedAt time.Time `protobuf:"bytes,20,opt,name=modified_at,json=modifiedAt,stdtime" json:"modified_at"`
	// Người chỉnh sửa cuối cùng
	ModifiedBy string `protobuf:"bytes,21,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{5} }

func (m *Post) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Post) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *Post) GetCategory() Category {
	if m != nil {
		return m.Category
	}
	return Category{}
}

func (m *Post) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

func (m *Post) GetAuthorName() string {
	if m != nil {
		return m.AuthorName
	}
	return ""
}

func (m *Post) GetAuthorAvatar() string {
	if m != nil {
		return m.AuthorAvatar
	}
	return ""
}

func (m *Post) GetTagIds() []string {
	if m != nil {
		return m.TagIds
	}
	return nil
}

func (m *Post) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Post) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Post) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Post) GetContentHtml() string {
	if m != nil {
		return m.ContentHtml
	}
	return ""
}

func (m *Post) GetContentMarkdown() string {
	if m != nil {
		return m.ContentMarkdown
	}
	return ""
}

func (m *Post) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *Post) GetVoteScore() int32 {
	if m != nil {
		return m.VoteScore
	}
	return 0
}

func (m *Post) GetBookmarkCount() int32 {
	if m != nil {
		return m.BookmarkCount
	}
	return 0
}

func (m *Post) GetViewCount() int32 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *Post) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Post) GetIsAnonymous() bool {
	if m != nil {
		return m.IsAnonymous
	}
	return false
}

func (m *Post) GetPublishedAt() time.Time {
	if m != nil {
		return m.PublishedAt
	}
	return time.Time{}
}

func (m *Post) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Post) GetModifiedAt() time.Time {
	if m != nil {
		return m.ModifiedAt
	}
	return time.Time{}
}

func (m *Post) GetModifiedBy() string {
	if m != nil {
		return m.ModifiedBy
	}
	return ""
}

// Bảng lưu danh sách Bookmark
type Bookmark struct {
	// Id bài viết
	PostId string `protobuf:"bytes,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty" sql:",pk"`
	Post   Post   `protobuf:"bytes,3,opt,name=post" json:"post"`
	// Id User
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:",pk"`
}

func (m *Bookmark) Reset()                    { *m = Bookmark{} }
func (*Bookmark) ProtoMessage()               {}
func (*Bookmark) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{6} }

func (m *Bookmark) GetPostId() string {
	if m != nil {
		return m.PostId
	}
	return ""
}

func (m *Bookmark) GetPost() Post {
	if m != nil {
		return m.Post
	}
	return Post{}
}

func (m *Bookmark) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// Bảng lưu Vote cho bài viết
type PostVote struct {
	// Id bài viết
	PostId string `protobuf:"bytes,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty" sql:",pk"`
	Post   Post   `protobuf:"bytes,4,opt,name=post" json:"post"`
	// Id User
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:",pk"`
	// Up vote +1, Down vote -1
	Vote int32 `protobuf:"varint,3,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *PostVote) Reset()                    { *m = PostVote{} }
func (*PostVote) ProtoMessage()               {}
func (*PostVote) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{7} }

func (m *PostVote) GetPostId() string {
	if m != nil {
		return m.PostId
	}
	return ""
}

func (m *PostVote) GetPost() Post {
	if m != nil {
		return m.Post
	}
	return Post{}
}

func (m *PostVote) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *PostVote) GetVote() int32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

// Bảng lưu danh sách bình luận
type Comment struct {
	// Id bình luận (uuid)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Id bình luận được trả lời
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Id bài viết
	PostId string `protobuf:"bytes,3,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	Post   Post   `protobuf:"bytes,20,opt,name=post" json:"post"`
	// Id User
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Nội dung bình luận dạng HTML
	ContentHtml string `protobuf:"bytes,5,opt,name=content_html,json=contentHtml,proto3" json:"content_html,omitempty"`
	// Nội dung bình luận dạng Markdown
	ContentMarkdown string `protobuf:"bytes,6,opt,name=content_markdown,json=contentMarkdown,proto3" json:"content_markdown,omitempty"`
	// Tổng điểm Vote
	VoteScore int32 `protobuf:"varint,7,opt,name=vote_score,json=voteScore,proto3" json:"vote_score,omitempty"`
	// Thời điểm bình luận
	CreatedAt time.Time `protobuf:"bytes,8,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	// Thời điểm chỉnh sửa cuối cùng
	ModifiedAt time.Time `protobuf:"bytes,9,opt,name=modified_at,json=modifiedAt,stdtime" json:"modified_at"`
	// Người chỉnh sửa cuối cùng
	ModifiedBy string `protobuf:"bytes,10,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{8} }

func (m *Comment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Comment) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *Comment) GetPostId() string {
	if m != nil {
		return m.PostId
	}
	return ""
}

func (m *Comment) GetPost() Post {
	if m != nil {
		return m.Post
	}
	return Post{}
}

func (m *Comment) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Comment) GetContentHtml() string {
	if m != nil {
		return m.ContentHtml
	}
	return ""
}

func (m *Comment) GetContentMarkdown() string {
	if m != nil {
		return m.ContentMarkdown
	}
	return ""
}

func (m *Comment) GetVoteScore() int32 {
	if m != nil {
		return m.VoteScore
	}
	return 0
}

func (m *Comment) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Comment) GetModifiedAt() time.Time {
	if m != nil {
		return m.ModifiedAt
	}
	return time.Time{}
}

func (m *Comment) GetModifiedBy() string {
	if m != nil {
		return m.ModifiedBy
	}
	return ""
}

// Bảng lưu Vote cho bình luận
type CommentVote struct {
	// Id bình luận
	CommentId string `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	// Id User
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Up vote +1, Down vote -1
	Vote int32 `protobuf:"varint,3,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *CommentVote) Reset()                    { *m = CommentVote{} }
func (*CommentVote) ProtoMessage()               {}
func (*CommentVote) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{9} }

func (m *CommentVote) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *CommentVote) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CommentVote) GetVote() int32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

// Bảng lưu danh sách AuthorFollow
type AuthorFollow struct {
	// Id tác giả được follow
	AuthorId string `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:",pk"`
	// Id người follow
	FollowerId string `protobuf:"bytes,2,opt,name=follower_id,json=followerId,proto3" json:"follower_id,omitempty" sql:",pk"`
}

func (m *AuthorFollow) Reset()                    { *m = AuthorFollow{} }
func (*AuthorFollow) ProtoMessage()               {}
func (*AuthorFollow) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{10} }

func (m *AuthorFollow) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

func (m *AuthorFollow) GetFollowerId() string {
	if m != nil {
		return m.FollowerId
	}
	return ""
}

// Bảng lưu danh sách TagFollow
type TagFollow struct {
	// Id Tag
	TagId string `protobuf:"bytes,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty" sql:",pk"`
	Tag   Tag    `protobuf:"bytes,3,opt,name=tag" json:"tag"`
	// Id User
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:",pk"`
}

func (m *TagFollow) Reset()                    { *m = TagFollow{} }
func (*TagFollow) ProtoMessage()               {}
func (*TagFollow) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{11} }

func (m *TagFollow) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

func (m *TagFollow) GetTag() Tag {
	if m != nil {
		return m.Tag
	}
	return Tag{}
}

func (m *TagFollow) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type AuthorStats struct {
	// Tổng số lượng bài viết
	NumberOfPosts int32 `protobuf:"varint,1,opt,name=number_of_posts,json=numberOfPosts,proto3" json:"number_of_posts,omitempty"`
	// Tổng số lượt vote trong tất cả các bài viết
	NumberOfVotes int32 `protobuf:"varint,2,opt,name=number_of_votes,json=numberOfVotes,proto3" json:"number_of_votes,omitempty"`
	// Tổng số lượt xem trong tất cả các bài viết
	NumberOfViews int32 `protobuf:"varint,3,opt,name=number_of_views,json=numberOfViews,proto3" json:"number_of_views,omitempty"`
	// Danh sách các danh mục mà tác giả đã viết bài
	Categories *Category `protobuf:"bytes,4,opt,name=categories" json:"categories,omitempty"`
}

func (m *AuthorStats) Reset()                    { *m = AuthorStats{} }
func (*AuthorStats) ProtoMessage()               {}
func (*AuthorStats) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{12} }

func (m *AuthorStats) GetNumberOfPosts() int32 {
	if m != nil {
		return m.NumberOfPosts
	}
	return 0
}

func (m *AuthorStats) GetNumberOfVotes() int32 {
	if m != nil {
		return m.NumberOfVotes
	}
	return 0
}

func (m *AuthorStats) GetNumberOfViews() int32 {
	if m != nil {
		return m.NumberOfViews
	}
	return 0
}

func (m *AuthorStats) GetCategories() *Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "blog.EmptyRequest")
	proto.RegisterType((*ResultResponse)(nil), "blog.ResultResponse")
	proto.RegisterType((*Pagination)(nil), "blog.Pagination")
	proto.RegisterType((*Category)(nil), "blog.Category")
	proto.RegisterType((*Tag)(nil), "blog.Tag")
	proto.RegisterType((*Post)(nil), "blog.Post")
	proto.RegisterType((*Bookmark)(nil), "blog.Bookmark")
	proto.RegisterType((*PostVote)(nil), "blog.PostVote")
	proto.RegisterType((*Comment)(nil), "blog.Comment")
	proto.RegisterType((*CommentVote)(nil), "blog.CommentVote")
	proto.RegisterType((*AuthorFollow)(nil), "blog.AuthorFollow")
	proto.RegisterType((*TagFollow)(nil), "blog.TagFollow")
	proto.RegisterType((*AuthorStats)(nil), "blog.AuthorStats")
	proto.RegisterEnum("blog.Pagination_Direction", Pagination_Direction_name, Pagination_Direction_value)
}
func (x Pagination_Direction) String() string {
	s, ok := Pagination_Direction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *EmptyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmptyRequest)
	if !ok {
		that2, ok := that.(EmptyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResultResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResultResponse)
	if !ok {
		that2, ok := that.(ResultResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Pagination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pagination)
	if !ok {
		that2, ok := that.(Pagination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if this.Columns[i] != that1.Columns[i] {
			return false
		}
	}
	if this.OrderByColumn != that1.OrderByColumn {
		return false
	}
	if this.OrderByDirection != that1.OrderByDirection {
		return false
	}
	if this.CurrentPage != that1.CurrentPage {
		return false
	}
	return true
}
func (this *Category) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Category)
	if !ok {
		that2, ok := that.(Category)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Slug != that1.Slug {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.PostCount != that1.PostCount {
		return false
	}
	return true
}
func (this *Tag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tag)
	if !ok {
		that2, ok := that.(Tag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Slug != that1.Slug {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.PostCount != that1.PostCount {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.CreatedBy != that1.CreatedBy {
		return false
	}
	return true
}
func (this *Post) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Post)
	if !ok {
		that2, ok := that.(Post)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CategoryId != that1.CategoryId {
		return false
	}
	if !this.Category.Equal(&that1.Category) {
		return false
	}
	if this.AuthorId != that1.AuthorId {
		return false
	}
	if this.AuthorName != that1.AuthorName {
		return false
	}
	if this.AuthorAvatar != that1.AuthorAvatar {
		return false
	}
	if len(this.TagIds) != len(that1.TagIds) {
		return false
	}
	for i := range this.TagIds {
		if this.TagIds[i] != that1.TagIds[i] {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Slug != that1.Slug {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.ContentHtml != that1.ContentHtml {
		return false
	}
	if this.ContentMarkdown != that1.ContentMarkdown {
		return false
	}
	if this.Thumbnail != that1.Thumbnail {
		return false
	}
	if this.VoteScore != that1.VoteScore {
		return false
	}
	if this.BookmarkCount != that1.BookmarkCount {
		return false
	}
	if this.ViewCount != that1.ViewCount {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.IsAnonymous != that1.IsAnonymous {
		return false
	}
	if !this.PublishedAt.Equal(that1.PublishedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.ModifiedAt.Equal(that1.ModifiedAt) {
		return false
	}
	if this.ModifiedBy != that1.ModifiedBy {
		return false
	}
	return true
}
func (this *Bookmark) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bookmark)
	if !ok {
		that2, ok := that.(Bookmark)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PostId != that1.PostId {
		return false
	}
	if !this.Post.Equal(&that1.Post) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	return true
}
func (this *PostVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostVote)
	if !ok {
		that2, ok := that.(PostVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PostId != that1.PostId {
		return false
	}
	if !this.Post.Equal(&that1.Post) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.Vote != that1.Vote {
		return false
	}
	return true
}
func (this *Comment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Comment)
	if !ok {
		that2, ok := that.(Comment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ParentId != that1.ParentId {
		return false
	}
	if this.PostId != that1.PostId {
		return false
	}
	if !this.Post.Equal(&that1.Post) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.ContentHtml != that1.ContentHtml {
		return false
	}
	if this.ContentMarkdown != that1.ContentMarkdown {
		return false
	}
	if this.VoteScore != that1.VoteScore {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.ModifiedAt.Equal(that1.ModifiedAt) {
		return false
	}
	if this.ModifiedBy != that1.ModifiedBy {
		return false
	}
	return true
}
func (this *CommentVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommentVote)
	if !ok {
		that2, ok := that.(CommentVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommentId != that1.CommentId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.Vote != that1.Vote {
		return false
	}
	return true
}
func (this *AuthorFollow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorFollow)
	if !ok {
		that2, ok := that.(AuthorFollow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthorId != that1.AuthorId {
		return false
	}
	if this.FollowerId != that1.FollowerId {
		return false
	}
	return true
}
func (this *TagFollow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagFollow)
	if !ok {
		that2, ok := that.(TagFollow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TagId != that1.TagId {
		return false
	}
	if !this.Tag.Equal(&that1.Tag) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	return true
}
func (this *AuthorStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorStats)
	if !ok {
		that2, ok := that.(AuthorStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumberOfPosts != that1.NumberOfPosts {
		return false
	}
	if this.NumberOfVotes != that1.NumberOfVotes {
		return false
	}
	if this.NumberOfViews != that1.NumberOfViews {
		return false
	}
	if !this.Categories.Equal(that1.Categories) {
		return false
	}
	return true
}
func (this *EmptyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&blog.EmptyRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResultResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&blog.ResultResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pagination) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&blog.Pagination{")
	s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	s = append(s, "OrderByColumn: "+fmt.Sprintf("%#v", this.OrderByColumn)+",\n")
	s = append(s, "OrderByDirection: "+fmt.Sprintf("%#v", this.OrderByDirection)+",\n")
	s = append(s, "CurrentPage: "+fmt.Sprintf("%#v", this.CurrentPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Category) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&blog.Category{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Slug: "+fmt.Sprintf("%#v", this.Slug)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "PostCount: "+fmt.Sprintf("%#v", this.PostCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&blog.Tag{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Slug: "+fmt.Sprintf("%#v", this.Slug)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "PostCount: "+fmt.Sprintf("%#v", this.PostCount)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "CreatedBy: "+fmt.Sprintf("%#v", this.CreatedBy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Post) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&blog.Post{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "CategoryId: "+fmt.Sprintf("%#v", this.CategoryId)+",\n")
	s = append(s, "Category: "+strings.Replace(this.Category.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "AuthorId: "+fmt.Sprintf("%#v", this.AuthorId)+",\n")
	s = append(s, "AuthorName: "+fmt.Sprintf("%#v", this.AuthorName)+",\n")
	s = append(s, "AuthorAvatar: "+fmt.Sprintf("%#v", this.AuthorAvatar)+",\n")
	s = append(s, "TagIds: "+fmt.Sprintf("%#v", this.TagIds)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Slug: "+fmt.Sprintf("%#v", this.Slug)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "ContentHtml: "+fmt.Sprintf("%#v", this.ContentHtml)+",\n")
	s = append(s, "ContentMarkdown: "+fmt.Sprintf("%#v", this.ContentMarkdown)+",\n")
	s = append(s, "Thumbnail: "+fmt.Sprintf("%#v", this.Thumbnail)+",\n")
	s = append(s, "VoteScore: "+fmt.Sprintf("%#v", this.VoteScore)+",\n")
	s = append(s, "BookmarkCount: "+fmt.Sprintf("%#v", this.BookmarkCount)+",\n")
	s = append(s, "ViewCount: "+fmt.Sprintf("%#v", this.ViewCount)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "IsAnonymous: "+fmt.Sprintf("%#v", this.IsAnonymous)+",\n")
	s = append(s, "PublishedAt: "+fmt.Sprintf("%#v", this.PublishedAt)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	s = append(s, "ModifiedBy: "+fmt.Sprintf("%#v", this.ModifiedBy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Bookmark) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&blog.Bookmark{")
	s = append(s, "PostId: "+fmt.Sprintf("%#v", this.PostId)+",\n")
	s = append(s, "Post: "+strings.Replace(this.Post.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostVote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&blog.PostVote{")
	s = append(s, "PostId: "+fmt.Sprintf("%#v", this.PostId)+",\n")
	s = append(s, "Post: "+strings.Replace(this.Post.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Vote: "+fmt.Sprintf("%#v", this.Vote)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Comment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&blog.Comment{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ParentId: "+fmt.Sprintf("%#v", this.ParentId)+",\n")
	s = append(s, "PostId: "+fmt.Sprintf("%#v", this.PostId)+",\n")
	s = append(s, "Post: "+strings.Replace(this.Post.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ContentHtml: "+fmt.Sprintf("%#v", this.ContentHtml)+",\n")
	s = append(s, "ContentMarkdown: "+fmt.Sprintf("%#v", this.ContentMarkdown)+",\n")
	s = append(s, "VoteScore: "+fmt.Sprintf("%#v", this.VoteScore)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	s = append(s, "ModifiedBy: "+fmt.Sprintf("%#v", this.ModifiedBy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CommentVote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&blog.CommentVote{")
	s = append(s, "CommentId: "+fmt.Sprintf("%#v", this.CommentId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Vote: "+fmt.Sprintf("%#v", this.Vote)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorFollow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&blog.AuthorFollow{")
	s = append(s, "AuthorId: "+fmt.Sprintf("%#v", this.AuthorId)+",\n")
	s = append(s, "FollowerId: "+fmt.Sprintf("%#v", this.FollowerId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagFollow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&blog.TagFollow{")
	s = append(s, "TagId: "+fmt.Sprintf("%#v", this.TagId)+",\n")
	s = append(s, "Tag: "+strings.Replace(this.Tag.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&blog.AuthorStats{")
	s = append(s, "NumberOfPosts: "+fmt.Sprintf("%#v", this.NumberOfPosts)+",\n")
	s = append(s, "NumberOfVotes: "+fmt.Sprintf("%#v", this.NumberOfVotes)+",\n")
	s = append(s, "NumberOfViews: "+fmt.Sprintf("%#v", this.NumberOfViews)+",\n")
	if this.Categories != nil {
		s = append(s, "Categories: "+fmt.Sprintf("%#v", this.Categories)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBase(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EmptyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Pagination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pagination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.OrderByColumn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.OrderByColumn)))
		i += copy(dAtA[i:], m.OrderByColumn)
	}
	if m.OrderByDirection != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.OrderByDirection))
	}
	if m.CurrentPage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.CurrentPage))
	}
	return i, nil
}

func (m *Category) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Category) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Slug) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.PostCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.PostCount))
	}
	return i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Slug) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if m.PostCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.PostCount))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n1, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.CreatedBy) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.CreatedBy)))
		i += copy(dAtA[i:], m.CreatedBy)
	}
	return i, nil
}

func (m *Post) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Post) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.CategoryId))
	}
	if len(m.AuthorId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.AuthorId)))
		i += copy(dAtA[i:], m.AuthorId)
	}
	if len(m.AuthorName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.AuthorName)))
		i += copy(dAtA[i:], m.AuthorName)
	}
	if len(m.AuthorAvatar) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.AuthorAvatar)))
		i += copy(dAtA[i:], m.AuthorAvatar)
	}
	if len(m.TagIds) > 0 {
		for _, s := range m.TagIds {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Slug) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.ContentHtml) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.ContentHtml)))
		i += copy(dAtA[i:], m.ContentHtml)
	}
	if len(m.ContentMarkdown) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.ContentMarkdown)))
		i += copy(dAtA[i:], m.ContentMarkdown)
	}
	if len(m.Thumbnail) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Thumbnail)))
		i += copy(dAtA[i:], m.Thumbnail)
	}
	if m.VoteScore != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.VoteScore))
	}
	if m.BookmarkCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.BookmarkCount))
	}
	if m.ViewCount != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.ViewCount))
	}
	if m.Status != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.Status))
	}
	if m.IsAnonymous {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.IsAnonymous {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.PublishedAt)))
	n2, err := types.StdTimeMarshalTo(m.PublishedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n3, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.ModifiedAt)))
	n4, err := types.StdTimeMarshalTo(m.ModifiedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.ModifiedBy) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.ModifiedBy)))
		i += copy(dAtA[i:], m.ModifiedBy)
	}
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBase(dAtA, i, uint64(m.Category.Size()))
	n5, err := m.Category.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *Bookmark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bookmark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PostId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.PostId)))
		i += copy(dAtA[i:], m.PostId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBase(dAtA, i, uint64(m.Post.Size()))
	n6, err := m.Post.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *PostVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PostId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.PostId)))
		i += copy(dAtA[i:], m.PostId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.Vote != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.Vote))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintBase(dAtA, i, uint64(m.Post.Size()))
	n7, err := m.Post.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *Comment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.PostId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.PostId)))
		i += copy(dAtA[i:], m.PostId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.ContentHtml) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.ContentHtml)))
		i += copy(dAtA[i:], m.ContentHtml)
	}
	if len(m.ContentMarkdown) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.ContentMarkdown)))
		i += copy(dAtA[i:], m.ContentMarkdown)
	}
	if m.VoteScore != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.VoteScore))
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n8, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x4a
	i++
	i = encodeVarintBase(dAtA, i, uint64(types.SizeOfStdTime(m.ModifiedAt)))
	n9, err := types.StdTimeMarshalTo(m.ModifiedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.ModifiedBy) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.ModifiedBy)))
		i += copy(dAtA[i:], m.ModifiedBy)
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBase(dAtA, i, uint64(m.Post.Size()))
	n10, err := m.Post.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *CommentVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.Vote != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.Vote))
	}
	return i, nil
}

func (m *AuthorFollow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorFollow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.AuthorId)))
		i += copy(dAtA[i:], m.AuthorId)
	}
	if len(m.FollowerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.FollowerId)))
		i += copy(dAtA[i:], m.FollowerId)
	}
	return i, nil
}

func (m *TagFollow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagFollow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TagId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.TagId)))
		i += copy(dAtA[i:], m.TagId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBase(dAtA, i, uint64(m.Tag.Size()))
	n11, err := m.Tag.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *AuthorStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumberOfPosts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.NumberOfPosts))
	}
	if m.NumberOfVotes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.NumberOfVotes))
	}
	if m.NumberOfViews != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.NumberOfViews))
	}
	if m.Categories != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.Categories.Size()))
		n12, err := m.Categories.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EmptyRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResultResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *Pagination) Size() (n int) {
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	l = len(m.OrderByColumn)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.OrderByDirection != 0 {
		n += 1 + sovBase(uint64(m.OrderByDirection))
	}
	if m.CurrentPage != 0 {
		n += 1 + sovBase(uint64(m.CurrentPage))
	}
	return n
}

func (m *Category) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBase(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.PostCount != 0 {
		n += 1 + sovBase(uint64(m.PostCount))
	}
	return n
}

func (m *Tag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.PostCount != 0 {
		n += 1 + sovBase(uint64(m.PostCount))
	}
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovBase(uint64(l))
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *Post) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.CategoryId != 0 {
		n += 1 + sovBase(uint64(m.CategoryId))
	}
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.AuthorName)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.AuthorAvatar)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.TagIds) > 0 {
		for _, s := range m.TagIds {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.ContentHtml)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.ContentMarkdown)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.VoteScore != 0 {
		n += 1 + sovBase(uint64(m.VoteScore))
	}
	if m.BookmarkCount != 0 {
		n += 1 + sovBase(uint64(m.BookmarkCount))
	}
	if m.ViewCount != 0 {
		n += 1 + sovBase(uint64(m.ViewCount))
	}
	if m.Status != 0 {
		n += 2 + sovBase(uint64(m.Status))
	}
	if m.IsAnonymous {
		n += 3
	}
	l = types.SizeOfStdTime(m.PublishedAt)
	n += 2 + l + sovBase(uint64(l))
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 2 + l + sovBase(uint64(l))
	l = types.SizeOfStdTime(m.ModifiedAt)
	n += 2 + l + sovBase(uint64(l))
	l = len(m.ModifiedBy)
	if l > 0 {
		n += 2 + l + sovBase(uint64(l))
	}
	l = m.Category.Size()
	n += 2 + l + sovBase(uint64(l))
	return n
}

func (m *Bookmark) Size() (n int) {
	var l int
	_ = l
	l = len(m.PostId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = m.Post.Size()
	n += 1 + l + sovBase(uint64(l))
	return n
}

func (m *PostVote) Size() (n int) {
	var l int
	_ = l
	l = len(m.PostId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Vote != 0 {
		n += 1 + sovBase(uint64(m.Vote))
	}
	l = m.Post.Size()
	n += 1 + l + sovBase(uint64(l))
	return n
}

func (m *Comment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.PostId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.ContentHtml)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.ContentMarkdown)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.VoteScore != 0 {
		n += 1 + sovBase(uint64(m.VoteScore))
	}
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovBase(uint64(l))
	l = types.SizeOfStdTime(m.ModifiedAt)
	n += 1 + l + sovBase(uint64(l))
	l = len(m.ModifiedBy)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = m.Post.Size()
	n += 2 + l + sovBase(uint64(l))
	return n
}

func (m *CommentVote) Size() (n int) {
	var l int
	_ = l
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Vote != 0 {
		n += 1 + sovBase(uint64(m.Vote))
	}
	return n
}

func (m *AuthorFollow) Size() (n int) {
	var l int
	_ = l
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.FollowerId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *TagFollow) Size() (n int) {
	var l int
	_ = l
	l = len(m.TagId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = m.Tag.Size()
	n += 1 + l + sovBase(uint64(l))
	return n
}

func (m *AuthorStats) Size() (n int) {
	var l int
	_ = l
	if m.NumberOfPosts != 0 {
		n += 1 + sovBase(uint64(m.NumberOfPosts))
	}
	if m.NumberOfVotes != 0 {
		n += 1 + sovBase(uint64(m.NumberOfVotes))
	}
	if m.NumberOfViews != 0 {
		n += 1 + sovBase(uint64(m.NumberOfViews))
	}
	if m.Categories != nil {
		l = m.Categories.Size()
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func sovBase(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EmptyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmptyRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ResultResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResultResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pagination) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pagination{`,
		`Columns:` + fmt.Sprintf("%v", this.Columns) + `,`,
		`OrderByColumn:` + fmt.Sprintf("%v", this.OrderByColumn) + `,`,
		`OrderByDirection:` + fmt.Sprintf("%v", this.OrderByDirection) + `,`,
		`CurrentPage:` + fmt.Sprintf("%v", this.CurrentPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Category) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Category{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Slug:` + fmt.Sprintf("%v", this.Slug) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`PostCount:` + fmt.Sprintf("%v", this.PostCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tag{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Slug:` + fmt.Sprintf("%v", this.Slug) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`PostCount:` + fmt.Sprintf("%v", this.PostCount) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`CreatedBy:` + fmt.Sprintf("%v", this.CreatedBy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Post) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Post{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`CategoryId:` + fmt.Sprintf("%v", this.CategoryId) + `,`,
		`AuthorId:` + fmt.Sprintf("%v", this.AuthorId) + `,`,
		`AuthorName:` + fmt.Sprintf("%v", this.AuthorName) + `,`,
		`AuthorAvatar:` + fmt.Sprintf("%v", this.AuthorAvatar) + `,`,
		`TagIds:` + fmt.Sprintf("%v", this.TagIds) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Slug:` + fmt.Sprintf("%v", this.Slug) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`ContentHtml:` + fmt.Sprintf("%v", this.ContentHtml) + `,`,
		`ContentMarkdown:` + fmt.Sprintf("%v", this.ContentMarkdown) + `,`,
		`Thumbnail:` + fmt.Sprintf("%v", this.Thumbnail) + `,`,
		`VoteScore:` + fmt.Sprintf("%v", this.VoteScore) + `,`,
		`BookmarkCount:` + fmt.Sprintf("%v", this.BookmarkCount) + `,`,
		`ViewCount:` + fmt.Sprintf("%v", this.ViewCount) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`IsAnonymous:` + fmt.Sprintf("%v", this.IsAnonymous) + `,`,
		`PublishedAt:` + strings.Replace(strings.Replace(this.PublishedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`ModifiedAt:` + strings.Replace(strings.Replace(this.ModifiedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`ModifiedBy:` + fmt.Sprintf("%v", this.ModifiedBy) + `,`,
		`Category:` + strings.Replace(strings.Replace(this.Category.String(), "Category", "Category", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bookmark) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bookmark{`,
		`PostId:` + fmt.Sprintf("%v", this.PostId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Post:` + strings.Replace(strings.Replace(this.Post.String(), "Post", "Post", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostVote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostVote{`,
		`PostId:` + fmt.Sprintf("%v", this.PostId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Vote:` + fmt.Sprintf("%v", this.Vote) + `,`,
		`Post:` + strings.Replace(strings.Replace(this.Post.String(), "Post", "Post", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Comment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Comment{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ParentId:` + fmt.Sprintf("%v", this.ParentId) + `,`,
		`PostId:` + fmt.Sprintf("%v", this.PostId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`ContentHtml:` + fmt.Sprintf("%v", this.ContentHtml) + `,`,
		`ContentMarkdown:` + fmt.Sprintf("%v", this.ContentMarkdown) + `,`,
		`VoteScore:` + fmt.Sprintf("%v", this.VoteScore) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`ModifiedAt:` + strings.Replace(strings.Replace(this.ModifiedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`ModifiedBy:` + fmt.Sprintf("%v", this.ModifiedBy) + `,`,
		`Post:` + strings.Replace(strings.Replace(this.Post.String(), "Post", "Post", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommentVote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommentVote{`,
		`CommentId:` + fmt.Sprintf("%v", this.CommentId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Vote:` + fmt.Sprintf("%v", this.Vote) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorFollow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorFollow{`,
		`AuthorId:` + fmt.Sprintf("%v", this.AuthorId) + `,`,
		`FollowerId:` + fmt.Sprintf("%v", this.FollowerId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagFollow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagFollow{`,
		`TagId:` + fmt.Sprintf("%v", this.TagId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Tag:` + strings.Replace(strings.Replace(this.Tag.String(), "Tag", "Tag", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorStats{`,
		`NumberOfPosts:` + fmt.Sprintf("%v", this.NumberOfPosts) + `,`,
		`NumberOfVotes:` + fmt.Sprintf("%v", this.NumberOfVotes) + `,`,
		`NumberOfViews:` + fmt.Sprintf("%v", this.NumberOfViews) + `,`,
		`Categories:` + strings.Replace(fmt.Sprintf("%v", this.Categories), "Category", "Category", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBase(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EmptyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pagination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pagination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pagination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderByColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderByColumn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderByDirection", wireType)
			}
			m.OrderByDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderByDirection |= (Pagination_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Category) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Category: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Category: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostCount", wireType)
			}
			m.PostCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostCount", wireType)
			}
			m.PostCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Post) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorAvatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorAvatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagIds = append(m.TagIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHtml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHtml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentMarkdown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentMarkdown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteScore", wireType)
			}
			m.VoteScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookmarkCount", wireType)
			}
			m.BookmarkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BookmarkCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewCount", wireType)
			}
			m.ViewCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAnonymous", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAnonymous = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.PublishedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ModifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModifiedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bookmark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bookmark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bookmark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Post.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Post.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Comment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHtml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHtml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentMarkdown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentMarkdown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteScore", wireType)
			}
			m.VoteScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ModifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModifiedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Post.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorFollow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorFollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorFollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagFollow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagFollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagFollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfPosts", wireType)
			}
			m.NumberOfPosts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfPosts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfVotes", wireType)
			}
			m.NumberOfVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfVotes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfViews", wireType)
			}
			m.NumberOfViews = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfViews |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Categories == nil {
				m.Categories = &Category{}
			}
			if err := m.Categories.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBase
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBase(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBase = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("base.proto", fileDescriptorBase) }

var fileDescriptorBase = []byte{
	// 1213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x6d, 0xfd, 0x71, 0x28, 0xc9, 0xce, 0x26, 0x4d, 0x08, 0xa7, 0x95, 0x1c, 0x36, 0x49,
	0xdd, 0x22, 0x55, 0x8a, 0xf4, 0xe6, 0x9b, 0xa4, 0xa4, 0x8d, 0x0e, 0x6d, 0x03, 0xda, 0x28, 0xd0,
	0x93, 0xb0, 0x14, 0x57, 0x34, 0x1b, 0x92, 0xab, 0x70, 0x97, 0x31, 0x04, 0xf4, 0x90, 0x47, 0xc8,
	0xa1, 0x0f, 0x91, 0x17, 0xe8, 0xb9, 0xd7, 0x1c, 0x73, 0x2a, 0x0a, 0x14, 0x75, 0x1b, 0xf5, 0xd2,
	0x63, 0xe0, 0x27, 0x28, 0xf6, 0x4f, 0xb2, 0x65, 0xc1, 0x48, 0x8a, 0xdc, 0xb8, 0xdf, 0x7c, 0x3b,
	0x3b, 0x3b, 0xf3, 0xcd, 0x2c, 0x01, 0x02, 0xcc, 0x48, 0x67, 0x92, 0x53, 0x4e, 0x51, 0x29, 0x48,
	0x68, 0xb4, 0xfd, 0x79, 0x14, 0xf3, 0xc3, 0x22, 0xe8, 0x8c, 0x68, 0x7a, 0x37, 0xa2, 0x11, 0xbd,
	0x2b, 0x8d, 0x41, 0x31, 0x96, 0x2b, 0xb9, 0x90, 0x5f, 0x6a, 0xd3, 0x76, 0x3b, 0xa2, 0x34, 0x4a,
	0xc8, 0x82, 0xc5, 0xe3, 0x94, 0x30, 0x8e, 0xd3, 0x89, 0x22, 0x78, 0x4d, 0xa8, 0x3f, 0x48, 0x27,
	0x7c, 0xea, 0x93, 0x27, 0x05, 0x61, 0xdc, 0xeb, 0x41, 0xd3, 0x27, 0xac, 0x48, 0xb8, 0x4f, 0xd8,
	0x84, 0x66, 0x8c, 0xa0, 0xab, 0x50, 0x61, 0x1c, 0xf3, 0x82, 0xb9, 0xd6, 0x8e, 0xb5, 0x5b, 0xf3,
	0xf5, 0x0a, 0xb9, 0x50, 0x4d, 0x09, 0x63, 0x38, 0x22, 0xee, 0xfa, 0x8e, 0xb5, 0x6b, 0xfb, 0x66,
	0xe9, 0xfd, 0x61, 0x01, 0x3c, 0xc2, 0x51, 0x9c, 0x61, 0x1e, 0xd3, 0x4c, 0x10, 0x47, 0x34, 0x29,
	0xd2, 0x4c, 0x78, 0xd8, 0x10, 0x44, 0xbd, 0x44, 0xb7, 0x61, 0x93, 0xe6, 0x21, 0xc9, 0x87, 0xc1,
	0x74, 0xa8, 0x30, 0xed, 0xaa, 0x21, 0xe1, 0xde, 0xb4, 0x2f, 0x41, 0xf4, 0x10, 0xd0, 0x9c, 0x17,
	0xc6, 0x39, 0x19, 0x09, 0xbf, 0xee, 0xc6, 0x8e, 0xb5, 0xdb, 0xbc, 0xb7, 0xdd, 0x11, 0x79, 0xe9,
	0x2c, 0xce, 0xeb, 0xdc, 0x37, 0x0c, 0x7f, 0x4b, 0xbb, 0x99, 0x23, 0xe8, 0x06, 0xd4, 0x47, 0x45,
	0x9e, 0x93, 0x8c, 0x0f, 0x27, 0x22, 0xf2, 0xd2, 0x8e, 0xb5, 0x5b, 0xf6, 0x1d, 0x8d, 0x3d, 0x12,
	0xd1, 0xb7, 0xc0, 0x5e, 0xf0, 0xab, 0xb0, 0xd1, 0xdd, 0xef, 0x6f, 0xad, 0xa1, 0x1a, 0x94, 0xee,
	0x3f, 0xd8, 0xef, 0x6f, 0x59, 0xde, 0xaf, 0x16, 0xd4, 0xfa, 0x98, 0x93, 0x88, 0xe6, 0x53, 0xd4,
	0x84, 0xf5, 0x38, 0x94, 0x89, 0x29, 0xfb, 0xeb, 0x71, 0x88, 0x3e, 0x81, 0x32, 0x8f, 0x79, 0xa2,
	0x53, 0xd2, 0xbb, 0x74, 0x72, 0xdc, 0x6e, 0xb0, 0x27, 0xc9, 0x9e, 0x77, 0xa7, 0xc8, 0xe2, 0x27,
	0x05, 0xf1, 0x7c, 0x65, 0x47, 0xb7, 0xa0, 0xc4, 0x92, 0x22, 0x92, 0x97, 0x58, 0xc9, 0x93, 0x66,
	0x84, 0xa0, 0x14, 0x8f, 0x68, 0x26, 0xe3, 0xb4, 0x7d, 0xf9, 0x8d, 0x76, 0xc0, 0x09, 0x09, 0x1b,
	0xe5, 0xf1, 0x44, 0xa6, 0xa1, 0x2c, 0x4d, 0xa7, 0x21, 0xf4, 0x11, 0xc0, 0x84, 0x32, 0x3e, 0x1c,
	0xd1, 0x22, 0xe3, 0x6e, 0x45, 0x46, 0x67, 0x0b, 0xa4, 0x2f, 0x00, 0xef, 0x37, 0x0b, 0x36, 0x0e,
	0x70, 0x74, 0x2a, 0x78, 0x5b, 0x06, 0x7f, 0xe5, 0x4c, 0xf0, 0x26, 0x52, 0x74, 0x3a, 0xd2, 0x0b,
	0xc2, 0x3a, 0x7b, 0x68, 0x79, 0xe9, 0x50, 0xd4, 0x07, 0x18, 0xe5, 0x04, 0x73, 0x12, 0x0e, 0xb1,
	0x8a, 0xc9, 0xb9, 0xb7, 0xdd, 0x51, 0xf2, 0xec, 0x18, 0x79, 0x76, 0x0e, 0x8c, 0x3c, 0x7b, 0xb5,
	0x97, 0xc7, 0xed, 0xb5, 0xe7, 0x7f, 0xb5, 0x2d, 0xdf, 0xd6, 0xfb, 0xba, 0x5c, 0x9c, 0x61, 0x9c,
	0x04, 0x53, 0xb7, 0x2a, 0x4f, 0x37, 0xe6, 0xde, 0xd4, 0xfb, 0xb3, 0x02, 0xa5, 0x47, 0x94, 0xf1,
	0x73, 0x37, 0x6b, 0x83, 0x33, 0xd2, 0x25, 0x1b, 0xc6, 0xa1, 0xbc, 0x5f, 0xd9, 0x07, 0x03, 0x0d,
	0x42, 0x74, 0x1d, 0x6c, 0x5c, 0xf0, 0x43, 0x9a, 0x0b, 0xb3, 0xba, 0x69, 0x4d, 0x01, 0x03, 0xb9,
	0x5b, 0x1b, 0x33, 0x9c, 0x12, 0x7d, 0x69, 0x50, 0xd0, 0xb7, 0x38, 0x25, 0xe8, 0x63, 0x68, 0x68,
	0x02, 0x7e, 0x8a, 0x39, 0xce, 0x75, 0x4d, 0xea, 0x0a, 0xec, 0x4a, 0x0c, 0xed, 0x42, 0x95, 0xe3,
	0x68, 0x18, 0x87, 0xcc, 0xad, 0x88, 0x36, 0xe8, 0x6d, 0x9e, 0x1c, 0xb7, 0x9d, 0x49, 0xb4, 0xe7,
	0xdd, 0xc1, 0x79, 0x8e, 0xa7, 0x9e, 0x5f, 0xe1, 0x38, 0x1a, 0x84, 0x6c, 0x51, 0x87, 0xea, 0xaa,
	0x3a, 0xd4, 0x4e, 0xd5, 0x61, 0x49, 0x0a, 0xf6, 0x79, 0x29, 0x08, 0xc1, 0xd3, 0x8c, 0x0b, 0xc1,
	0x1f, 0xf2, 0x34, 0x71, 0x41, 0x51, 0x34, 0xf6, 0x90, 0xa7, 0x09, 0xfa, 0x14, 0xb6, 0x0c, 0x25,
	0xc5, 0xf9, 0xe3, 0x90, 0x1e, 0x65, 0xae, 0x23, 0x69, 0x9b, 0x1a, 0xff, 0x46, 0xc3, 0xe8, 0x43,
	0xb0, 0xf9, 0x61, 0x91, 0x06, 0x19, 0x8e, 0x13, 0xb7, 0xae, 0xd2, 0x3f, 0x07, 0x44, 0x75, 0x9e,
	0x52, 0x4e, 0x86, 0x6c, 0x44, 0x73, 0xe2, 0x36, 0x94, 0x02, 0x04, 0xb2, 0x2f, 0x00, 0x74, 0x0b,
	0x9a, 0x01, 0xa5, 0x8f, 0xc5, 0x19, 0x5a, 0x24, 0x4d, 0x49, 0x69, 0x18, 0x54, 0x09, 0x45, 0x78,
	0x89, 0xc9, 0x91, 0xa6, 0x6c, 0x6a, 0x2f, 0x31, 0x39, 0x52, 0xe6, 0xc5, 0x38, 0xda, 0x92, 0x26,
	0x33, 0x8e, 0xf6, 0xa0, 0x1e, 0xb3, 0x21, 0xce, 0x68, 0x36, 0x4d, 0x69, 0xc1, 0xdc, 0x4b, 0x62,
	0x58, 0xf5, 0xae, 0x9d, 0x1c, 0xb7, 0x2f, 0xcb, 0xc6, 0x0a, 0xc9, 0x18, 0x17, 0x09, 0xdf, 0x1b,
	0xe3, 0x84, 0x11, 0xcf, 0x77, 0x62, 0xd6, 0x35, 0x5c, 0xf4, 0x35, 0xd4, 0x27, 0x45, 0x90, 0xc4,
	0xec, 0x50, 0xa9, 0x13, 0xbd, 0x83, 0x3a, 0x9d, 0xf9, 0xce, 0xee, 0xb2, 0xc8, 0x2f, 0xff, 0x3f,
	0x91, 0x3f, 0x00, 0x27, 0xa5, 0x61, 0x3c, 0x8e, 0x95, 0x97, 0x2b, 0xef, 0xe0, 0x05, 0xcc, 0xc6,
	0x2e, 0x17, 0xaa, 0x9d, 0xbb, 0x09, 0xa6, 0xee, 0x07, 0x4a, 0xb5, 0x06, 0xea, 0x4d, 0xd1, 0x17,
	0x50, 0x33, 0x1d, 0xe0, 0x5e, 0x95, 0x87, 0x34, 0xd5, 0x2c, 0x35, 0xd3, 0xad, 0x57, 0x12, 0x8e,
	0xfd, 0x39, 0xcb, 0x7b, 0x66, 0x41, 0xad, 0xa7, 0x8b, 0x85, 0x6e, 0x43, 0x55, 0xf6, 0xbb, 0x69,
	0xb4, 0x5e, 0xe3, 0xe4, 0xb8, 0x6d, 0xab, 0x21, 0x36, 0x79, 0xec, 0xf9, 0x15, 0x61, 0x1d, 0x84,
	0x82, 0x57, 0x30, 0x92, 0x9b, 0xbe, 0x3b, 0xcf, 0x13, 0xd6, 0x41, 0x88, 0x6e, 0x42, 0x49, 0xec,
	0x90, 0xdd, 0xe7, 0xdc, 0x03, 0x3d, 0xd6, 0x29, 0xe3, 0x3a, 0x0c, 0x69, 0xf5, 0x7e, 0xb6, 0xa0,
	0x26, 0xc0, 0xef, 0x29, 0x27, 0xef, 0x3d, 0x04, 0x04, 0x25, 0x21, 0x57, 0x19, 0x42, 0xd9, 0x97,
	0xdf, 0xf3, 0xb0, 0x4a, 0x17, 0x86, 0xf5, 0x62, 0x03, 0xaa, 0x7d, 0x9a, 0xa6, 0x24, 0x3b, 0x3f,
	0x7c, 0xae, 0x83, 0x3d, 0xc1, 0xf2, 0xc9, 0x31, 0xe7, 0xfb, 0x35, 0x05, 0x0c, 0x42, 0x74, 0x6d,
	0x71, 0x05, 0x35, 0x76, 0x4c, 0xcc, 0xd7, 0x16, 0x31, 0xab, 0x81, 0x63, 0x82, 0x5c, 0xee, 0xe8,
	0xf2, 0xdb, 0x75, 0x74, 0x65, 0x75, 0x47, 0x9f, 0xed, 0xd9, 0xea, 0x72, 0xcf, 0x9e, 0x15, 0x74,
	0xed, 0xbd, 0x08, 0xda, 0x7e, 0x3f, 0x82, 0x86, 0x73, 0x82, 0x36, 0xa5, 0xba, 0x72, 0x61, 0xa9,
	0x7e, 0x00, 0x47, 0x57, 0x4a, 0x6a, 0x48, 0x3c, 0x29, 0x6a, 0x39, 0x97, 0x91, 0x6f, 0x6b, 0xe4,
	0x6c, 0x19, 0xd6, 0xcf, 0x94, 0x61, 0x85, 0x56, 0xbc, 0x1f, 0xa1, 0xde, 0x95, 0x23, 0xff, 0x2b,
	0x9a, 0x24, 0xf4, 0x08, 0x7d, 0x76, 0xfa, 0x55, 0x59, 0xa9, 0xd0, 0xc5, 0x23, 0xd3, 0x01, 0x67,
	0x2c, 0x77, 0x5d, 0xa0, 0x53, 0x30, 0x8c, 0x41, 0xe8, 0xfd, 0x04, 0xf6, 0x01, 0x8e, 0xf4, 0x41,
	0x37, 0xa1, 0xa2, 0xde, 0x96, 0xd5, 0xa7, 0x94, 0xe5, 0xc3, 0xf2, 0xd6, 0x6d, 0x70, 0x03, 0x36,
	0x38, 0x8e, 0x74, 0x23, 0xda, 0x2a, 0x8d, 0x07, 0x38, 0xd2, 0x59, 0x14, 0x36, 0xef, 0x17, 0x0b,
	0x1c, 0x75, 0xd5, 0x7d, 0x8e, 0xb9, 0xfc, 0x93, 0xcb, 0x8a, 0x34, 0x20, 0xf9, 0x90, 0x8e, 0x87,
	0x22, 0xcd, 0x4c, 0xff, 0x14, 0x35, 0x14, 0xfc, 0xdd, 0x58, 0xd4, 0x61, 0x89, 0x27, 0x72, 0xc6,
	0xf4, 0x63, 0x3c, 0xe7, 0x89, 0xa2, 0x2c, 0xf3, 0x62, 0x72, 0xc4, 0x74, 0xa2, 0x17, 0x3c, 0x01,
	0xa2, 0x0e, 0x98, 0x57, 0x3c, 0x26, 0x4c, 0xf7, 0xe8, 0xd2, 0x14, 0xf3, 0x4f, 0x31, 0x7a, 0x77,
	0x5e, 0xbd, 0x6e, 0xad, 0xfd, 0xfe, 0xba, 0xb5, 0xf6, 0xe6, 0x75, 0xcb, 0x7a, 0x36, 0x6b, 0x59,
	0x2f, 0x66, 0x2d, 0xeb, 0xe5, 0xac, 0x65, 0xbd, 0x9a, 0xb5, 0xac, 0xbf, 0x67, 0x2d, 0xeb, 0xdf,
	0x59, 0x6b, 0xed, 0xcd, 0xac, 0x65, 0x3d, 0xff, 0xa7, 0xb5, 0x16, 0x54, 0xa4, 0x36, 0xbf, 0xfc,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x74, 0x0f, 0xb5, 0x87, 0x0b, 0x00, 0x00,
}
