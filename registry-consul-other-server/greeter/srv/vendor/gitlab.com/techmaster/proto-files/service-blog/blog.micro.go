// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: blog.proto

/*
Package blog is a generated protocol buffer package.

It is generated from these files:
	blog.proto
	base.proto
	blog_author.proto
	blog_category.proto
	blog_comment.proto
	blog_post.proto
	blog_tag.proto

It has these top-level messages:
	EmptyRequest
	ResultResponse
	Pagination
	Category
	Tag
	Post
	Bookmark
	PostVote
	Comment
	CommentVote
	AuthorFollow
	TagFollow
	AuthorStats
	GetPersonalBlogInfoResponse
	GetAuthorByIdRequest
	GetAuthorByIdResponse
	GetHotAuthorsResponse
	GetPublishedPostsByAuthorRequest
	GetSameAuthorPublishedPostsRequest
	FollowAuthorRequest
	UnFollowAuthorRequest
	GetPersonalFollowResponse
	GetAuthorFollowRequest
	GetAuthorFollowResponse
	CreateCategoryRequest
	CreateCategoryResponse
	GetCategoriesRequest
	GetCategoriesResponse
	GetCategoryByIdRequest
	GetCategoryByIdResponse
	UpdateCategoryRequest
	UpdateCategoryResponse
	DeleteCategoryRequest
	GetPublishedPostsByCategoryRequest
	GetPublishedPostsByCategoryResponse
	CreateCommentRequest
	GetCommentsOfPostRequest
	GetCommentsOfPostResponse
	GetReplyCommentsRequest
	GetReplyCommentsResponse
	UpdateCommentRequest
	DeleteCommentRequest
	DeleteCommentsOfPostRequest
	DeleteCommentsOfOwnPostRequest
	VoteCommentRequest
	CreatePostRequest
	CreatePostResponse
	GetPostByIdRequest
	GetPostByIdResponse
	GetPostsRequest
	GetOwnPostsRequest
	GetPublishedPostsResquest
	GetRelatedPostsRequest
	ListPostsResponse
	UpdatePostRequest
	UpdatePostResponse
	DeletePostRequest
	PublishPostRequest
	SearchPostsRequest
	VoteUpPostRequest
	VoteDownPostRequest
	BookmarkRequest
	CreateTagRequest
	CreateTagResponse
	GetTagsRequest
	GetTagsResponse
	GetPopularTagsRequest
	GetPopularTagsResponse
	GetPublishedPostsByTagRequest
	SearchTagsRequest
	SearchTagsResponse
	FollowTagRequest
	UnFollowTagRequest
	GetFollowingTagsResponse
*/
package blog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Blog service

type BlogClient interface {
	// Tạo bài viết
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*CreatePostResponse, error)
	// Tạo bài viết của bản thân
	CreateOwnPost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*CreatePostResponse, error)
	// Lấy thông tin bài viết theo Id
	GetPostById(ctx context.Context, in *GetPostByIdRequest, opts ...client.CallOption) (*GetPostByIdResponse, error)
	// Lấy thông tin bài viết do bản thân tạo ra theo Id
	GetOwnPostById(ctx context.Context, in *GetPostByIdRequest, opts ...client.CallOption) (*GetPostByIdResponse, error)
	// Lấy danh sách bài viết
	GetPosts(ctx context.Context, in *GetPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error)
	// Lấy danh sách bài viết của bản thân
	GetOwnPosts(ctx context.Context, in *GetOwnPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error)
	// Lấy danh sách các bài viết đã xuất bản
	GetPublishedPosts(ctx context.Context, in *GetPublishedPostsResquest, opts ...client.CallOption) (*ListPostsResponse, error)
	// Lấy danh sách bài viết liên quan
	GetRelatedPosts(ctx context.Context, in *GetRelatedPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error)
	// Cập nhật bài viết
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...client.CallOption) (*UpdatePostResponse, error)
	// Cập nhật bài viết của bản thân
	UpdateOwnPost(ctx context.Context, in *UpdatePostRequest, opts ...client.CallOption) (*UpdatePostResponse, error)
	// Xóa bài viết
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Xóa bài viết của bản thân
	DeleteOwnPost(ctx context.Context, in *DeletePostRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Xuất bản bài viết
	PublishPost(ctx context.Context, in *PublishPostRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Xuất bản bài viết của bản thân
	PublishOwnPost(ctx context.Context, in *PublishPostRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Tìm kiếm bài viết
	SearchPosts(ctx context.Context, in *SearchPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error)
	// Vote Up bài viết
	VoteUpPost(ctx context.Context, in *VoteUpPostRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Vote Down bài viết
	VoteDownPost(ctx context.Context, in *VoteDownPostRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Bookmark bài viết
	Bookmark(ctx context.Context, in *BookmarkRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lấy danh sách bài viết đã bookmark
	GetBookmarkPosts(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ListPostsResponse, error)
	// Tạo danh mục
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error)
	// Lấy danh sách danh mục
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...client.CallOption) (*GetCategoriesResponse, error)
	// Lấy thông tin danh mục theo Id
	GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...client.CallOption) (*GetCategoryByIdResponse, error)
	// Cập nhật danh mục
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error)
	// Xóa danh mục
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lấy danh sách bài viết đã xuất bản theo danh mục
	GetPublishedPostsByCategory(ctx context.Context, in *GetPublishedPostsByCategoryRequest, opts ...client.CallOption) (*GetPublishedPostsByCategoryResponse, error)
	// Tạo Tag
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...client.CallOption) (*CreateTagResponse, error)
	// Lấy danh sách Tag
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...client.CallOption) (*GetTagsResponse, error)
	// Lấy danh sách Tag thông dụng (có nhiều bài viết)
	GetPopularTags(ctx context.Context, in *GetPopularTagsRequest, opts ...client.CallOption) (*GetPopularTagsResponse, error)
	// Lấy danh sách bài viết đã xuất bản theo Tag
	GetPublishedPostsByTag(ctx context.Context, in *GetPublishedPostsByTagRequest, opts ...client.CallOption) (*ListPostsResponse, error)
	// Tìm kiếm Tag theo keyword
	SearchTags(ctx context.Context, in *SearchTagsRequest, opts ...client.CallOption) (*SearchTagsResponse, error)
	// Theo dõi Tag
	FollowTag(ctx context.Context, in *FollowTagRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lấy danh sách Tag mà người dùng đang theo dõi
	GetFollowingTags(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetFollowingTagsResponse, error)
	// Lấy thông tin blog cá nhân
	GetPersonalBlogInfo(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetPersonalBlogInfoResponse, error)
	// Lấy thông tin tác giả theo Id
	GetAuthorById(ctx context.Context, in *GetAuthorByIdRequest, opts ...client.CallOption) (*GetAuthorByIdResponse, error)
	// Lấy danh sách top tác giả
	GetHotAuthors(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetHotAuthorsResponse, error)
	// Lấy danh sách bài viết đã xuất bản theo tác giả
	GetPublishedPostsByAuthor(ctx context.Context, in *GetPublishedPostsByAuthorRequest, opts ...client.CallOption) (*ListPostsResponse, error)
	// Lấy danh sách bài viết đã xuất bản có cùng tác giả
	GetSameAuthorPublishedPosts(ctx context.Context, in *GetSameAuthorPublishedPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error)
	// Theo dõi tác giả
	FollowAuthor(ctx context.Context, in *FollowAuthorRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lấy danh sách những người đang theo dõi cá nhân, và những người cá nhân đang theo dõi
	GetPersonalFollow(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetPersonalFollowResponse, error)
	// Lấy danh sách những người đang theo dõi tác giả, và những người tác giả đang theo dõi
	GetAuthorFollow(ctx context.Context, in *GetAuthorFollowRequest, opts ...client.CallOption) (*GetAuthorFollowResponse, error)
	// Bình luận bài viết
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Lấy danh sách bình luận của bài viết (sắp xếp từ mới đến cũ)
	GetCommentsOfPost(ctx context.Context, in *GetCommentsOfPostRequest, opts ...client.CallOption) (*GetCommentsOfPostResponse, error)
	// Lấy danh sách trả lời của một bình luận (sắp xếp từ cũ đến mới)
	GetReplyComments(ctx context.Context, in *GetReplyCommentsRequest, opts ...client.CallOption) (*GetReplyCommentsResponse, error)
	// Cập nhật bình luận
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Cập nhật bình luận của bản thân
	UpdateOwnComment(ctx context.Context, in *UpdateCommentRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Xóa bình luận
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Xóa bình luận bài viết
	DeleteCommentsOfPost(ctx context.Context, in *DeleteCommentsOfPostRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Xóa bình luận bài viết của bản thân
	DeleteCommentsOfOwnPost(ctx context.Context, in *DeleteCommentsOfOwnPostRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Xóa bình luận của bản thân
	DeleteOwnComment(ctx context.Context, in *DeleteCommentRequest, opts ...client.CallOption) (*ResultResponse, error)
	// Vote bình luận
	VoteComment(ctx context.Context, in *VoteCommentRequest, opts ...client.CallOption) (*ResultResponse, error)
}

type blogClient struct {
	c           client.Client
	serviceName string
}

func NewBlogClient(serviceName string, c client.Client) BlogClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "blog"
	}
	return &blogClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *blogClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*CreatePostResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.CreatePost", in)
	out := new(CreatePostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) CreateOwnPost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*CreatePostResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.CreateOwnPost", in)
	out := new(CreatePostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPostById(ctx context.Context, in *GetPostByIdRequest, opts ...client.CallOption) (*GetPostByIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetPostById", in)
	out := new(GetPostByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetOwnPostById(ctx context.Context, in *GetPostByIdRequest, opts ...client.CallOption) (*GetPostByIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetOwnPostById", in)
	out := new(GetPostByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPosts(ctx context.Context, in *GetPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetPosts", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetOwnPosts(ctx context.Context, in *GetOwnPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetOwnPosts", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPublishedPosts(ctx context.Context, in *GetPublishedPostsResquest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetPublishedPosts", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetRelatedPosts(ctx context.Context, in *GetRelatedPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetRelatedPosts", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...client.CallOption) (*UpdatePostResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.UpdatePost", in)
	out := new(UpdatePostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdateOwnPost(ctx context.Context, in *UpdatePostRequest, opts ...client.CallOption) (*UpdatePostResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.UpdateOwnPost", in)
	out := new(UpdatePostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.DeletePost", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeleteOwnPost(ctx context.Context, in *DeletePostRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.DeleteOwnPost", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) PublishPost(ctx context.Context, in *PublishPostRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.PublishPost", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) PublishOwnPost(ctx context.Context, in *PublishPostRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.PublishOwnPost", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) SearchPosts(ctx context.Context, in *SearchPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.SearchPosts", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) VoteUpPost(ctx context.Context, in *VoteUpPostRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.VoteUpPost", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) VoteDownPost(ctx context.Context, in *VoteDownPostRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.VoteDownPost", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) Bookmark(ctx context.Context, in *BookmarkRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.Bookmark", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetBookmarkPosts(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetBookmarkPosts", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.CreateCategory", in)
	out := new(CreateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...client.CallOption) (*GetCategoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetCategories", in)
	out := new(GetCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...client.CallOption) (*GetCategoryByIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetCategoryById", in)
	out := new(GetCategoryByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.UpdateCategory", in)
	out := new(UpdateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.DeleteCategory", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPublishedPostsByCategory(ctx context.Context, in *GetPublishedPostsByCategoryRequest, opts ...client.CallOption) (*GetPublishedPostsByCategoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetPublishedPostsByCategory", in)
	out := new(GetPublishedPostsByCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...client.CallOption) (*CreateTagResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.CreateTag", in)
	out := new(CreateTagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...client.CallOption) (*GetTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetTags", in)
	out := new(GetTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPopularTags(ctx context.Context, in *GetPopularTagsRequest, opts ...client.CallOption) (*GetPopularTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetPopularTags", in)
	out := new(GetPopularTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPublishedPostsByTag(ctx context.Context, in *GetPublishedPostsByTagRequest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetPublishedPostsByTag", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) SearchTags(ctx context.Context, in *SearchTagsRequest, opts ...client.CallOption) (*SearchTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.SearchTags", in)
	out := new(SearchTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) FollowTag(ctx context.Context, in *FollowTagRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.FollowTag", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetFollowingTags(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetFollowingTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetFollowingTags", in)
	out := new(GetFollowingTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPersonalBlogInfo(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetPersonalBlogInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetPersonalBlogInfo", in)
	out := new(GetPersonalBlogInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetAuthorById(ctx context.Context, in *GetAuthorByIdRequest, opts ...client.CallOption) (*GetAuthorByIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetAuthorById", in)
	out := new(GetAuthorByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetHotAuthors(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetHotAuthorsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetHotAuthors", in)
	out := new(GetHotAuthorsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPublishedPostsByAuthor(ctx context.Context, in *GetPublishedPostsByAuthorRequest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetPublishedPostsByAuthor", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetSameAuthorPublishedPosts(ctx context.Context, in *GetSameAuthorPublishedPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetSameAuthorPublishedPosts", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) FollowAuthor(ctx context.Context, in *FollowAuthorRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.FollowAuthor", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPersonalFollow(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GetPersonalFollowResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetPersonalFollow", in)
	out := new(GetPersonalFollowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetAuthorFollow(ctx context.Context, in *GetAuthorFollowRequest, opts ...client.CallOption) (*GetAuthorFollowResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetAuthorFollow", in)
	out := new(GetAuthorFollowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.CreateComment", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetCommentsOfPost(ctx context.Context, in *GetCommentsOfPostRequest, opts ...client.CallOption) (*GetCommentsOfPostResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetCommentsOfPost", in)
	out := new(GetCommentsOfPostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetReplyComments(ctx context.Context, in *GetReplyCommentsRequest, opts ...client.CallOption) (*GetReplyCommentsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.GetReplyComments", in)
	out := new(GetReplyCommentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.UpdateComment", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdateOwnComment(ctx context.Context, in *UpdateCommentRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.UpdateOwnComment", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.DeleteComment", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeleteCommentsOfPost(ctx context.Context, in *DeleteCommentsOfPostRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.DeleteCommentsOfPost", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeleteCommentsOfOwnPost(ctx context.Context, in *DeleteCommentsOfOwnPostRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.DeleteCommentsOfOwnPost", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeleteOwnComment(ctx context.Context, in *DeleteCommentRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.DeleteOwnComment", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) VoteComment(ctx context.Context, in *VoteCommentRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Blog.VoteComment", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Blog service

type BlogHandler interface {
	// Tạo bài viết
	CreatePost(context.Context, *CreatePostRequest, *CreatePostResponse) error
	// Tạo bài viết của bản thân
	CreateOwnPost(context.Context, *CreatePostRequest, *CreatePostResponse) error
	// Lấy thông tin bài viết theo Id
	GetPostById(context.Context, *GetPostByIdRequest, *GetPostByIdResponse) error
	// Lấy thông tin bài viết do bản thân tạo ra theo Id
	GetOwnPostById(context.Context, *GetPostByIdRequest, *GetPostByIdResponse) error
	// Lấy danh sách bài viết
	GetPosts(context.Context, *GetPostsRequest, *ListPostsResponse) error
	// Lấy danh sách bài viết của bản thân
	GetOwnPosts(context.Context, *GetOwnPostsRequest, *ListPostsResponse) error
	// Lấy danh sách các bài viết đã xuất bản
	GetPublishedPosts(context.Context, *GetPublishedPostsResquest, *ListPostsResponse) error
	// Lấy danh sách bài viết liên quan
	GetRelatedPosts(context.Context, *GetRelatedPostsRequest, *ListPostsResponse) error
	// Cập nhật bài viết
	UpdatePost(context.Context, *UpdatePostRequest, *UpdatePostResponse) error
	// Cập nhật bài viết của bản thân
	UpdateOwnPost(context.Context, *UpdatePostRequest, *UpdatePostResponse) error
	// Xóa bài viết
	DeletePost(context.Context, *DeletePostRequest, *ResultResponse) error
	// Xóa bài viết của bản thân
	DeleteOwnPost(context.Context, *DeletePostRequest, *ResultResponse) error
	// Xuất bản bài viết
	PublishPost(context.Context, *PublishPostRequest, *ResultResponse) error
	// Xuất bản bài viết của bản thân
	PublishOwnPost(context.Context, *PublishPostRequest, *ResultResponse) error
	// Tìm kiếm bài viết
	SearchPosts(context.Context, *SearchPostsRequest, *ListPostsResponse) error
	// Vote Up bài viết
	VoteUpPost(context.Context, *VoteUpPostRequest, *ResultResponse) error
	// Vote Down bài viết
	VoteDownPost(context.Context, *VoteDownPostRequest, *ResultResponse) error
	// Bookmark bài viết
	Bookmark(context.Context, *BookmarkRequest, *ResultResponse) error
	// Lấy danh sách bài viết đã bookmark
	GetBookmarkPosts(context.Context, *EmptyRequest, *ListPostsResponse) error
	// Tạo danh mục
	CreateCategory(context.Context, *CreateCategoryRequest, *CreateCategoryResponse) error
	// Lấy danh sách danh mục
	GetCategories(context.Context, *GetCategoriesRequest, *GetCategoriesResponse) error
	// Lấy thông tin danh mục theo Id
	GetCategoryById(context.Context, *GetCategoryByIdRequest, *GetCategoryByIdResponse) error
	// Cập nhật danh mục
	UpdateCategory(context.Context, *UpdateCategoryRequest, *UpdateCategoryResponse) error
	// Xóa danh mục
	DeleteCategory(context.Context, *DeleteCategoryRequest, *ResultResponse) error
	// Lấy danh sách bài viết đã xuất bản theo danh mục
	GetPublishedPostsByCategory(context.Context, *GetPublishedPostsByCategoryRequest, *GetPublishedPostsByCategoryResponse) error
	// Tạo Tag
	CreateTag(context.Context, *CreateTagRequest, *CreateTagResponse) error
	// Lấy danh sách Tag
	GetTags(context.Context, *GetTagsRequest, *GetTagsResponse) error
	// Lấy danh sách Tag thông dụng (có nhiều bài viết)
	GetPopularTags(context.Context, *GetPopularTagsRequest, *GetPopularTagsResponse) error
	// Lấy danh sách bài viết đã xuất bản theo Tag
	GetPublishedPostsByTag(context.Context, *GetPublishedPostsByTagRequest, *ListPostsResponse) error
	// Tìm kiếm Tag theo keyword
	SearchTags(context.Context, *SearchTagsRequest, *SearchTagsResponse) error
	// Theo dõi Tag
	FollowTag(context.Context, *FollowTagRequest, *ResultResponse) error
	// Lấy danh sách Tag mà người dùng đang theo dõi
	GetFollowingTags(context.Context, *EmptyRequest, *GetFollowingTagsResponse) error
	// Lấy thông tin blog cá nhân
	GetPersonalBlogInfo(context.Context, *EmptyRequest, *GetPersonalBlogInfoResponse) error
	// Lấy thông tin tác giả theo Id
	GetAuthorById(context.Context, *GetAuthorByIdRequest, *GetAuthorByIdResponse) error
	// Lấy danh sách top tác giả
	GetHotAuthors(context.Context, *EmptyRequest, *GetHotAuthorsResponse) error
	// Lấy danh sách bài viết đã xuất bản theo tác giả
	GetPublishedPostsByAuthor(context.Context, *GetPublishedPostsByAuthorRequest, *ListPostsResponse) error
	// Lấy danh sách bài viết đã xuất bản có cùng tác giả
	GetSameAuthorPublishedPosts(context.Context, *GetSameAuthorPublishedPostsRequest, *ListPostsResponse) error
	// Theo dõi tác giả
	FollowAuthor(context.Context, *FollowAuthorRequest, *ResultResponse) error
	// Lấy danh sách những người đang theo dõi cá nhân, và những người cá nhân đang theo dõi
	GetPersonalFollow(context.Context, *EmptyRequest, *GetPersonalFollowResponse) error
	// Lấy danh sách những người đang theo dõi tác giả, và những người tác giả đang theo dõi
	GetAuthorFollow(context.Context, *GetAuthorFollowRequest, *GetAuthorFollowResponse) error
	// Bình luận bài viết
	CreateComment(context.Context, *CreateCommentRequest, *ResultResponse) error
	// Lấy danh sách bình luận của bài viết (sắp xếp từ mới đến cũ)
	GetCommentsOfPost(context.Context, *GetCommentsOfPostRequest, *GetCommentsOfPostResponse) error
	// Lấy danh sách trả lời của một bình luận (sắp xếp từ cũ đến mới)
	GetReplyComments(context.Context, *GetReplyCommentsRequest, *GetReplyCommentsResponse) error
	// Cập nhật bình luận
	UpdateComment(context.Context, *UpdateCommentRequest, *ResultResponse) error
	// Cập nhật bình luận của bản thân
	UpdateOwnComment(context.Context, *UpdateCommentRequest, *ResultResponse) error
	// Xóa bình luận
	DeleteComment(context.Context, *DeleteCommentRequest, *ResultResponse) error
	// Xóa bình luận bài viết
	DeleteCommentsOfPost(context.Context, *DeleteCommentsOfPostRequest, *ResultResponse) error
	// Xóa bình luận bài viết của bản thân
	DeleteCommentsOfOwnPost(context.Context, *DeleteCommentsOfOwnPostRequest, *ResultResponse) error
	// Xóa bình luận của bản thân
	DeleteOwnComment(context.Context, *DeleteCommentRequest, *ResultResponse) error
	// Vote bình luận
	VoteComment(context.Context, *VoteCommentRequest, *ResultResponse) error
}

func RegisterBlogHandler(s server.Server, hdlr BlogHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Blog{hdlr}, opts...))
}

type Blog struct {
	BlogHandler
}

func (h *Blog) CreatePost(ctx context.Context, in *CreatePostRequest, out *CreatePostResponse) error {
	return h.BlogHandler.CreatePost(ctx, in, out)
}

func (h *Blog) CreateOwnPost(ctx context.Context, in *CreatePostRequest, out *CreatePostResponse) error {
	return h.BlogHandler.CreateOwnPost(ctx, in, out)
}

func (h *Blog) GetPostById(ctx context.Context, in *GetPostByIdRequest, out *GetPostByIdResponse) error {
	return h.BlogHandler.GetPostById(ctx, in, out)
}

func (h *Blog) GetOwnPostById(ctx context.Context, in *GetPostByIdRequest, out *GetPostByIdResponse) error {
	return h.BlogHandler.GetOwnPostById(ctx, in, out)
}

func (h *Blog) GetPosts(ctx context.Context, in *GetPostsRequest, out *ListPostsResponse) error {
	return h.BlogHandler.GetPosts(ctx, in, out)
}

func (h *Blog) GetOwnPosts(ctx context.Context, in *GetOwnPostsRequest, out *ListPostsResponse) error {
	return h.BlogHandler.GetOwnPosts(ctx, in, out)
}

func (h *Blog) GetPublishedPosts(ctx context.Context, in *GetPublishedPostsResquest, out *ListPostsResponse) error {
	return h.BlogHandler.GetPublishedPosts(ctx, in, out)
}

func (h *Blog) GetRelatedPosts(ctx context.Context, in *GetRelatedPostsRequest, out *ListPostsResponse) error {
	return h.BlogHandler.GetRelatedPosts(ctx, in, out)
}

func (h *Blog) UpdatePost(ctx context.Context, in *UpdatePostRequest, out *UpdatePostResponse) error {
	return h.BlogHandler.UpdatePost(ctx, in, out)
}

func (h *Blog) UpdateOwnPost(ctx context.Context, in *UpdatePostRequest, out *UpdatePostResponse) error {
	return h.BlogHandler.UpdateOwnPost(ctx, in, out)
}

func (h *Blog) DeletePost(ctx context.Context, in *DeletePostRequest, out *ResultResponse) error {
	return h.BlogHandler.DeletePost(ctx, in, out)
}

func (h *Blog) DeleteOwnPost(ctx context.Context, in *DeletePostRequest, out *ResultResponse) error {
	return h.BlogHandler.DeleteOwnPost(ctx, in, out)
}

func (h *Blog) PublishPost(ctx context.Context, in *PublishPostRequest, out *ResultResponse) error {
	return h.BlogHandler.PublishPost(ctx, in, out)
}

func (h *Blog) PublishOwnPost(ctx context.Context, in *PublishPostRequest, out *ResultResponse) error {
	return h.BlogHandler.PublishOwnPost(ctx, in, out)
}

func (h *Blog) SearchPosts(ctx context.Context, in *SearchPostsRequest, out *ListPostsResponse) error {
	return h.BlogHandler.SearchPosts(ctx, in, out)
}

func (h *Blog) VoteUpPost(ctx context.Context, in *VoteUpPostRequest, out *ResultResponse) error {
	return h.BlogHandler.VoteUpPost(ctx, in, out)
}

func (h *Blog) VoteDownPost(ctx context.Context, in *VoteDownPostRequest, out *ResultResponse) error {
	return h.BlogHandler.VoteDownPost(ctx, in, out)
}

func (h *Blog) Bookmark(ctx context.Context, in *BookmarkRequest, out *ResultResponse) error {
	return h.BlogHandler.Bookmark(ctx, in, out)
}

func (h *Blog) GetBookmarkPosts(ctx context.Context, in *EmptyRequest, out *ListPostsResponse) error {
	return h.BlogHandler.GetBookmarkPosts(ctx, in, out)
}

func (h *Blog) CreateCategory(ctx context.Context, in *CreateCategoryRequest, out *CreateCategoryResponse) error {
	return h.BlogHandler.CreateCategory(ctx, in, out)
}

func (h *Blog) GetCategories(ctx context.Context, in *GetCategoriesRequest, out *GetCategoriesResponse) error {
	return h.BlogHandler.GetCategories(ctx, in, out)
}

func (h *Blog) GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, out *GetCategoryByIdResponse) error {
	return h.BlogHandler.GetCategoryById(ctx, in, out)
}

func (h *Blog) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, out *UpdateCategoryResponse) error {
	return h.BlogHandler.UpdateCategory(ctx, in, out)
}

func (h *Blog) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, out *ResultResponse) error {
	return h.BlogHandler.DeleteCategory(ctx, in, out)
}

func (h *Blog) GetPublishedPostsByCategory(ctx context.Context, in *GetPublishedPostsByCategoryRequest, out *GetPublishedPostsByCategoryResponse) error {
	return h.BlogHandler.GetPublishedPostsByCategory(ctx, in, out)
}

func (h *Blog) CreateTag(ctx context.Context, in *CreateTagRequest, out *CreateTagResponse) error {
	return h.BlogHandler.CreateTag(ctx, in, out)
}

func (h *Blog) GetTags(ctx context.Context, in *GetTagsRequest, out *GetTagsResponse) error {
	return h.BlogHandler.GetTags(ctx, in, out)
}

func (h *Blog) GetPopularTags(ctx context.Context, in *GetPopularTagsRequest, out *GetPopularTagsResponse) error {
	return h.BlogHandler.GetPopularTags(ctx, in, out)
}

func (h *Blog) GetPublishedPostsByTag(ctx context.Context, in *GetPublishedPostsByTagRequest, out *ListPostsResponse) error {
	return h.BlogHandler.GetPublishedPostsByTag(ctx, in, out)
}

func (h *Blog) SearchTags(ctx context.Context, in *SearchTagsRequest, out *SearchTagsResponse) error {
	return h.BlogHandler.SearchTags(ctx, in, out)
}

func (h *Blog) FollowTag(ctx context.Context, in *FollowTagRequest, out *ResultResponse) error {
	return h.BlogHandler.FollowTag(ctx, in, out)
}

func (h *Blog) GetFollowingTags(ctx context.Context, in *EmptyRequest, out *GetFollowingTagsResponse) error {
	return h.BlogHandler.GetFollowingTags(ctx, in, out)
}

func (h *Blog) GetPersonalBlogInfo(ctx context.Context, in *EmptyRequest, out *GetPersonalBlogInfoResponse) error {
	return h.BlogHandler.GetPersonalBlogInfo(ctx, in, out)
}

func (h *Blog) GetAuthorById(ctx context.Context, in *GetAuthorByIdRequest, out *GetAuthorByIdResponse) error {
	return h.BlogHandler.GetAuthorById(ctx, in, out)
}

func (h *Blog) GetHotAuthors(ctx context.Context, in *EmptyRequest, out *GetHotAuthorsResponse) error {
	return h.BlogHandler.GetHotAuthors(ctx, in, out)
}

func (h *Blog) GetPublishedPostsByAuthor(ctx context.Context, in *GetPublishedPostsByAuthorRequest, out *ListPostsResponse) error {
	return h.BlogHandler.GetPublishedPostsByAuthor(ctx, in, out)
}

func (h *Blog) GetSameAuthorPublishedPosts(ctx context.Context, in *GetSameAuthorPublishedPostsRequest, out *ListPostsResponse) error {
	return h.BlogHandler.GetSameAuthorPublishedPosts(ctx, in, out)
}

func (h *Blog) FollowAuthor(ctx context.Context, in *FollowAuthorRequest, out *ResultResponse) error {
	return h.BlogHandler.FollowAuthor(ctx, in, out)
}

func (h *Blog) GetPersonalFollow(ctx context.Context, in *EmptyRequest, out *GetPersonalFollowResponse) error {
	return h.BlogHandler.GetPersonalFollow(ctx, in, out)
}

func (h *Blog) GetAuthorFollow(ctx context.Context, in *GetAuthorFollowRequest, out *GetAuthorFollowResponse) error {
	return h.BlogHandler.GetAuthorFollow(ctx, in, out)
}

func (h *Blog) CreateComment(ctx context.Context, in *CreateCommentRequest, out *ResultResponse) error {
	return h.BlogHandler.CreateComment(ctx, in, out)
}

func (h *Blog) GetCommentsOfPost(ctx context.Context, in *GetCommentsOfPostRequest, out *GetCommentsOfPostResponse) error {
	return h.BlogHandler.GetCommentsOfPost(ctx, in, out)
}

func (h *Blog) GetReplyComments(ctx context.Context, in *GetReplyCommentsRequest, out *GetReplyCommentsResponse) error {
	return h.BlogHandler.GetReplyComments(ctx, in, out)
}

func (h *Blog) UpdateComment(ctx context.Context, in *UpdateCommentRequest, out *ResultResponse) error {
	return h.BlogHandler.UpdateComment(ctx, in, out)
}

func (h *Blog) UpdateOwnComment(ctx context.Context, in *UpdateCommentRequest, out *ResultResponse) error {
	return h.BlogHandler.UpdateOwnComment(ctx, in, out)
}

func (h *Blog) DeleteComment(ctx context.Context, in *DeleteCommentRequest, out *ResultResponse) error {
	return h.BlogHandler.DeleteComment(ctx, in, out)
}

func (h *Blog) DeleteCommentsOfPost(ctx context.Context, in *DeleteCommentsOfPostRequest, out *ResultResponse) error {
	return h.BlogHandler.DeleteCommentsOfPost(ctx, in, out)
}

func (h *Blog) DeleteCommentsOfOwnPost(ctx context.Context, in *DeleteCommentsOfOwnPostRequest, out *ResultResponse) error {
	return h.BlogHandler.DeleteCommentsOfOwnPost(ctx, in, out)
}

func (h *Blog) DeleteOwnComment(ctx context.Context, in *DeleteCommentRequest, out *ResultResponse) error {
	return h.BlogHandler.DeleteOwnComment(ctx, in, out)
}

func (h *Blog) VoteComment(ctx context.Context, in *VoteCommentRequest, out *ResultResponse) error {
	return h.BlogHandler.VoteComment(ctx, in, out)
}
