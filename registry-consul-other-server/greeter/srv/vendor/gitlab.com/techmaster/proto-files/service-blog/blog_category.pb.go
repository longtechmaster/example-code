// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blog_category.proto

package blog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateCategoryRequest struct {
	// Tạo Danh mục - Dữ liệu truyền vào: title, slug, icon, description
	Category *Category `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
}

func (m *CreateCategoryRequest) Reset()      { *m = CreateCategoryRequest{} }
func (*CreateCategoryRequest) ProtoMessage() {}
func (*CreateCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{0}
}

func (m *CreateCategoryRequest) GetCategory() *Category {
	if m != nil {
		return m.Category
	}
	return nil
}

type CreateCategoryResponse struct {
	// Trả về danh mục vừa tạo
	Category *Category `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
}

func (m *CreateCategoryResponse) Reset()      { *m = CreateCategoryResponse{} }
func (*CreateCategoryResponse) ProtoMessage() {}
func (*CreateCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{1}
}

func (m *CreateCategoryResponse) GetCategory() *Category {
	if m != nil {
		return m.Category
	}
	return nil
}

type GetCategoriesRequest struct {
	// Dữ liệu phân trang và sorting
	Data *Pagination `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetCategoriesRequest) Reset()                    { *m = GetCategoriesRequest{} }
func (*GetCategoriesRequest) ProtoMessage()               {}
func (*GetCategoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlogCategory, []int{2} }

func (m *GetCategoriesRequest) GetData() *Pagination {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetCategoriesResponse struct {
	// Trả về danh sách danh mục
	Category []*Category `protobuf:"bytes,1,rep,name=category" json:"category,omitempty"`
}

func (m *GetCategoriesResponse) Reset()      { *m = GetCategoriesResponse{} }
func (*GetCategoriesResponse) ProtoMessage() {}
func (*GetCategoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{3}
}

func (m *GetCategoriesResponse) GetCategory() []*Category {
	if m != nil {
		return m.Category
	}
	return nil
}

type GetCategoryByIdRequest struct {
	// Id của danh mục
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetCategoryByIdRequest) Reset()      { *m = GetCategoryByIdRequest{} }
func (*GetCategoryByIdRequest) ProtoMessage() {}
func (*GetCategoryByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{4}
}

func (m *GetCategoryByIdRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetCategoryByIdResponse struct {
	// Trả về danh mục
	Category *Category `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
}

func (m *GetCategoryByIdResponse) Reset()      { *m = GetCategoryByIdResponse{} }
func (*GetCategoryByIdResponse) ProtoMessage() {}
func (*GetCategoryByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{5}
}

func (m *GetCategoryByIdResponse) GetCategory() *Category {
	if m != nil {
		return m.Category
	}
	return nil
}

type UpdateCategoryRequest struct {
	// Cập nhật danh mục
	Category *Category `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
}

func (m *UpdateCategoryRequest) Reset()      { *m = UpdateCategoryRequest{} }
func (*UpdateCategoryRequest) ProtoMessage() {}
func (*UpdateCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{6}
}

func (m *UpdateCategoryRequest) GetCategory() *Category {
	if m != nil {
		return m.Category
	}
	return nil
}

type UpdateCategoryResponse struct {
	// Trả về danh mục vừa cập nhật
	Category *Category `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
}

func (m *UpdateCategoryResponse) Reset()      { *m = UpdateCategoryResponse{} }
func (*UpdateCategoryResponse) ProtoMessage() {}
func (*UpdateCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{7}
}

func (m *UpdateCategoryResponse) GetCategory() *Category {
	if m != nil {
		return m.Category
	}
	return nil
}

type DeleteCategoryRequest struct {
	// Id danh mục
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteCategoryRequest) Reset()      { *m = DeleteCategoryRequest{} }
func (*DeleteCategoryRequest) ProtoMessage() {}
func (*DeleteCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{8}
}

func (m *DeleteCategoryRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetPublishedPostsByCategoryRequest struct {
	// Id của danh mục
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Phân trang
	Data *Pagination `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *GetPublishedPostsByCategoryRequest) Reset()      { *m = GetPublishedPostsByCategoryRequest{} }
func (*GetPublishedPostsByCategoryRequest) ProtoMessage() {}
func (*GetPublishedPostsByCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{9}
}

func (m *GetPublishedPostsByCategoryRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetPublishedPostsByCategoryRequest) GetData() *Pagination {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetPublishedPostsByCategoryResponse struct {
	// Trả về danh sách bài viết Public thuộc danh mục
	Post []*Post `protobuf:"bytes,1,rep,name=post" json:"post,omitempty"`
}

func (m *GetPublishedPostsByCategoryResponse) Reset()      { *m = GetPublishedPostsByCategoryResponse{} }
func (*GetPublishedPostsByCategoryResponse) ProtoMessage() {}
func (*GetPublishedPostsByCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogCategory, []int{10}
}

func (m *GetPublishedPostsByCategoryResponse) GetPost() []*Post {
	if m != nil {
		return m.Post
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateCategoryRequest)(nil), "blog.CreateCategoryRequest")
	proto.RegisterType((*CreateCategoryResponse)(nil), "blog.CreateCategoryResponse")
	proto.RegisterType((*GetCategoriesRequest)(nil), "blog.GetCategoriesRequest")
	proto.RegisterType((*GetCategoriesResponse)(nil), "blog.GetCategoriesResponse")
	proto.RegisterType((*GetCategoryByIdRequest)(nil), "blog.GetCategoryByIdRequest")
	proto.RegisterType((*GetCategoryByIdResponse)(nil), "blog.GetCategoryByIdResponse")
	proto.RegisterType((*UpdateCategoryRequest)(nil), "blog.UpdateCategoryRequest")
	proto.RegisterType((*UpdateCategoryResponse)(nil), "blog.UpdateCategoryResponse")
	proto.RegisterType((*DeleteCategoryRequest)(nil), "blog.DeleteCategoryRequest")
	proto.RegisterType((*GetPublishedPostsByCategoryRequest)(nil), "blog.GetPublishedPostsByCategoryRequest")
	proto.RegisterType((*GetPublishedPostsByCategoryResponse)(nil), "blog.GetPublishedPostsByCategoryResponse")
}
func (this *CreateCategoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCategoryRequest)
	if !ok {
		that2, ok := that.(CreateCategoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Category.Equal(that1.Category) {
		return false
	}
	return true
}
func (this *CreateCategoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCategoryResponse)
	if !ok {
		that2, ok := that.(CreateCategoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Category.Equal(that1.Category) {
		return false
	}
	return true
}
func (this *GetCategoriesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCategoriesRequest)
	if !ok {
		that2, ok := that.(GetCategoriesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *GetCategoriesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCategoriesResponse)
	if !ok {
		that2, ok := that.(GetCategoriesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Category) != len(that1.Category) {
		return false
	}
	for i := range this.Category {
		if !this.Category[i].Equal(that1.Category[i]) {
			return false
		}
	}
	return true
}
func (this *GetCategoryByIdRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCategoryByIdRequest)
	if !ok {
		that2, ok := that.(GetCategoryByIdRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetCategoryByIdResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCategoryByIdResponse)
	if !ok {
		that2, ok := that.(GetCategoryByIdResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Category.Equal(that1.Category) {
		return false
	}
	return true
}
func (this *UpdateCategoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCategoryRequest)
	if !ok {
		that2, ok := that.(UpdateCategoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Category.Equal(that1.Category) {
		return false
	}
	return true
}
func (this *UpdateCategoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCategoryResponse)
	if !ok {
		that2, ok := that.(UpdateCategoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Category.Equal(that1.Category) {
		return false
	}
	return true
}
func (this *DeleteCategoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCategoryRequest)
	if !ok {
		that2, ok := that.(DeleteCategoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetPublishedPostsByCategoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPublishedPostsByCategoryRequest)
	if !ok {
		that2, ok := that.(GetPublishedPostsByCategoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *GetPublishedPostsByCategoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPublishedPostsByCategoryResponse)
	if !ok {
		that2, ok := that.(GetPublishedPostsByCategoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Post) != len(that1.Post) {
		return false
	}
	for i := range this.Post {
		if !this.Post[i].Equal(that1.Post[i]) {
			return false
		}
	}
	return true
}
func (this *CreateCategoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.CreateCategoryRequest{")
	if this.Category != nil {
		s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCategoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.CreateCategoryResponse{")
	if this.Category != nil {
		s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCategoriesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetCategoriesRequest{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCategoriesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetCategoriesResponse{")
	if this.Category != nil {
		s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCategoryByIdRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetCategoryByIdRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCategoryByIdResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetCategoryByIdResponse{")
	if this.Category != nil {
		s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCategoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.UpdateCategoryRequest{")
	if this.Category != nil {
		s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCategoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.UpdateCategoryResponse{")
	if this.Category != nil {
		s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCategoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.DeleteCategoryRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPublishedPostsByCategoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&blog.GetPublishedPostsByCategoryRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPublishedPostsByCategoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetPublishedPostsByCategoryResponse{")
	if this.Post != nil {
		s = append(s, "Post: "+fmt.Sprintf("%#v", this.Post)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBlogCategory(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Category != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Category.Size()))
		n1, err := m.Category.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CreateCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Category != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Category.Size()))
		n2, err := m.Category.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetCategoriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCategoriesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GetCategoriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCategoriesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Category) > 0 {
		for _, msg := range m.Category {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlogCategory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetCategoryByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCategoryByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetCategoryByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCategoryByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Category != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Category.Size()))
		n4, err := m.Category.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *UpdateCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Category != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Category.Size()))
		n5, err := m.Category.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *UpdateCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Category != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Category.Size()))
		n6, err := m.Category.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *DeleteCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetPublishedPostsByCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPublishedPostsByCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Id))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlogCategory(dAtA, i, uint64(m.Data.Size()))
		n7, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *GetPublishedPostsByCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPublishedPostsByCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Post) > 0 {
		for _, msg := range m.Post {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlogCategory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintBlogCategory(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateCategoryRequest) Size() (n int) {
	var l int
	_ = l
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovBlogCategory(uint64(l))
	}
	return n
}

func (m *CreateCategoryResponse) Size() (n int) {
	var l int
	_ = l
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovBlogCategory(uint64(l))
	}
	return n
}

func (m *GetCategoriesRequest) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlogCategory(uint64(l))
	}
	return n
}

func (m *GetCategoriesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Category) > 0 {
		for _, e := range m.Category {
			l = e.Size()
			n += 1 + l + sovBlogCategory(uint64(l))
		}
	}
	return n
}

func (m *GetCategoryByIdRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBlogCategory(uint64(m.Id))
	}
	return n
}

func (m *GetCategoryByIdResponse) Size() (n int) {
	var l int
	_ = l
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovBlogCategory(uint64(l))
	}
	return n
}

func (m *UpdateCategoryRequest) Size() (n int) {
	var l int
	_ = l
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovBlogCategory(uint64(l))
	}
	return n
}

func (m *UpdateCategoryResponse) Size() (n int) {
	var l int
	_ = l
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovBlogCategory(uint64(l))
	}
	return n
}

func (m *DeleteCategoryRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBlogCategory(uint64(m.Id))
	}
	return n
}

func (m *GetPublishedPostsByCategoryRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBlogCategory(uint64(m.Id))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlogCategory(uint64(l))
	}
	return n
}

func (m *GetPublishedPostsByCategoryResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Post) > 0 {
		for _, e := range m.Post {
			l = e.Size()
			n += 1 + l + sovBlogCategory(uint64(l))
		}
	}
	return n
}

func sovBlogCategory(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlogCategory(x uint64) (n int) {
	return sovBlogCategory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateCategoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCategoryRequest{`,
		`Category:` + strings.Replace(fmt.Sprintf("%v", this.Category), "Category", "Category", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCategoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCategoryResponse{`,
		`Category:` + strings.Replace(fmt.Sprintf("%v", this.Category), "Category", "Category", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCategoriesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCategoriesRequest{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Pagination", "Pagination", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCategoriesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCategoriesResponse{`,
		`Category:` + strings.Replace(fmt.Sprintf("%v", this.Category), "Category", "Category", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCategoryByIdRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCategoryByIdRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCategoryByIdResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCategoryByIdResponse{`,
		`Category:` + strings.Replace(fmt.Sprintf("%v", this.Category), "Category", "Category", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCategoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCategoryRequest{`,
		`Category:` + strings.Replace(fmt.Sprintf("%v", this.Category), "Category", "Category", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCategoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCategoryResponse{`,
		`Category:` + strings.Replace(fmt.Sprintf("%v", this.Category), "Category", "Category", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCategoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCategoryRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPublishedPostsByCategoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPublishedPostsByCategoryRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Pagination", "Pagination", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPublishedPostsByCategoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPublishedPostsByCategoryResponse{`,
		`Post:` + strings.Replace(fmt.Sprintf("%v", this.Post), "Post", "Post", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBlogCategory(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &Category{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &Category{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCategoriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCategoriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCategoriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Pagination{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCategoriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCategoriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCategoriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = append(m.Category, &Category{})
			if err := m.Category[len(m.Category)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCategoryByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCategoryByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCategoryByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCategoryByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCategoryByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCategoryByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &Category{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &Category{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &Category{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPublishedPostsByCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPublishedPostsByCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPublishedPostsByCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Pagination{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPublishedPostsByCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPublishedPostsByCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPublishedPostsByCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogCategory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Post = append(m.Post, &Post{})
			if err := m.Post[len(m.Post)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlogCategory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlogCategory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlogCategory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlogCategory
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlogCategory
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlogCategory(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlogCategory = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlogCategory   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("blog_category.proto", fileDescriptorBlogCategory) }

var fileDescriptorBlogCategory = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xb1, 0x4a, 0x33, 0x41,
	0x14, 0x85, 0x77, 0xf2, 0xe7, 0x17, 0xb9, 0x42, 0x90, 0x68, 0xa2, 0x58, 0x5c, 0x64, 0x15, 0x0c,
	0x22, 0x29, 0xb4, 0xb5, 0xca, 0x26, 0x04, 0xbb, 0xb0, 0x60, 0x63, 0x23, 0xb3, 0xce, 0x25, 0x0e,
	0x84, 0xcc, 0x9a, 0x99, 0x14, 0xdb, 0xf9, 0x08, 0x3e, 0x86, 0x8f, 0x62, 0x99, 0xd2, 0xd2, 0x8c,
	0x8d, 0x65, 0x1e, 0x41, 0xb2, 0x99, 0xac, 0xb0, 0x91, 0x15, 0x63, 0x7b, 0xef, 0x3d, 0x87, 0xef,
	0xcc, 0x61, 0x60, 0x27, 0x1a, 0xa8, 0xfe, 0xed, 0x1d, 0x37, 0xd4, 0x57, 0xa3, 0xa4, 0x19, 0x8f,
	0x94, 0x51, 0xd5, 0xf2, 0x7c, 0x78, 0x00, 0x11, 0xd7, 0xb4, 0x98, 0xf8, 0x01, 0xd4, 0x82, 0x11,
	0x71, 0x43, 0x81, 0xbb, 0x0c, 0xe9, 0x61, 0x4c, 0xda, 0x54, 0x4f, 0x61, 0x73, 0x29, 0xde, 0x67,
	0x87, 0xac, 0xb1, 0x75, 0x5e, 0x69, 0xce, 0xd5, 0xcd, 0xec, 0x30, 0xdb, 0xfb, 0x6d, 0xa8, 0xe7,
	0x4d, 0x74, 0xac, 0x86, 0x9a, 0x7e, 0xe5, 0x72, 0x09, 0xbb, 0x5d, 0x32, 0x6e, 0x21, 0x49, 0x2f,
	0x49, 0x8e, 0xa1, 0x2c, 0xb8, 0xe1, 0x4e, 0xbf, 0xbd, 0xd0, 0xf7, 0x78, 0x5f, 0x0e, 0xb9, 0x91,
	0x6a, 0x18, 0xa6, 0xdb, 0x79, 0x90, 0x9c, 0xfa, 0x5b, 0x84, 0x7f, 0x85, 0x08, 0x0d, 0xa8, 0x7f,
	0x99, 0x24, 0xad, 0xe4, 0x4a, 0x2c, 0x21, 0x2a, 0x50, 0x92, 0x22, 0x45, 0xf8, 0x1f, 0x96, 0xa4,
	0xf0, 0x3b, 0xb0, 0xb7, 0x72, 0xb9, 0x46, 0xe6, 0x00, 0x6a, 0xd7, 0xb1, 0xf8, 0xfb, 0xf3, 0xe7,
	0x4d, 0xd6, 0x40, 0x39, 0x81, 0x5a, 0x9b, 0x06, 0xb4, 0x8a, 0x92, 0x8f, 0x7e, 0x03, 0x7e, 0x97,
	0x4c, 0x6f, 0x1c, 0x0d, 0xa4, 0xbe, 0x27, 0xd1, 0x53, 0xda, 0xe8, 0x56, 0xf2, 0x83, 0x2a, 0x6b,
	0xb1, 0x54, 0xd8, 0x62, 0x07, 0x8e, 0x0a, 0xbd, 0x5d, 0x2e, 0x84, 0x72, 0xac, 0xb4, 0x71, 0x7d,
	0x82, 0x33, 0x53, 0xda, 0x84, 0xe9, 0xbc, 0x75, 0x36, 0x99, 0xa2, 0xf7, 0x3a, 0x45, 0x6f, 0x36,
	0x45, 0xf6, 0x68, 0x91, 0x3d, 0x5b, 0x64, 0x2f, 0x16, 0xd9, 0xc4, 0x22, 0x7b, 0xb3, 0xc8, 0x3e,
	0x2c, 0x7a, 0x33, 0x8b, 0xec, 0xe9, 0x1d, 0xbd, 0x68, 0x23, 0xfd, 0x0a, 0x17, 0x9f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xf9, 0x2f, 0xf3, 0xeb, 0x33, 0x03, 0x00, 0x00,
}
