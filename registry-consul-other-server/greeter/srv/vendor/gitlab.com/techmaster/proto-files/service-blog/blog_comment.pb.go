// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blog_comment.proto

package blog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateCommentRequest struct {
	// Tạo comment - Dữ liệu truyền vào: parent_id, post_id, content_html, content_markdown
	Comment *Comment `protobuf:"bytes,1,opt,name=comment" json:"comment,omitempty"`
}

func (m *CreateCommentRequest) Reset()                    { *m = CreateCommentRequest{} }
func (*CreateCommentRequest) ProtoMessage()               {}
func (*CreateCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlogComment, []int{0} }

func (m *CreateCommentRequest) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type GetCommentsOfPostRequest struct {
	// Id bài viết
	PostId string `protobuf:"bytes,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	// Phân trang
	Data *Pagination `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *GetCommentsOfPostRequest) Reset()      { *m = GetCommentsOfPostRequest{} }
func (*GetCommentsOfPostRequest) ProtoMessage() {}
func (*GetCommentsOfPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogComment, []int{1}
}

func (m *GetCommentsOfPostRequest) GetPostId() string {
	if m != nil {
		return m.PostId
	}
	return ""
}

func (m *GetCommentsOfPostRequest) GetData() *Pagination {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetCommentsOfPostResponse struct {
	// Trả về danh sách comment thuộc bài viết
	ListComment []*Comment `protobuf:"bytes,1,rep,name=list_comment,json=listComment" json:"list_comment,omitempty"`
}

func (m *GetCommentsOfPostResponse) Reset()      { *m = GetCommentsOfPostResponse{} }
func (*GetCommentsOfPostResponse) ProtoMessage() {}
func (*GetCommentsOfPostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogComment, []int{2}
}

func (m *GetCommentsOfPostResponse) GetListComment() []*Comment {
	if m != nil {
		return m.ListComment
	}
	return nil
}

type GetReplyCommentsRequest struct {
	// Id bài viết
	PostId string `protobuf:"bytes,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	// Id comment cha
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Phân trang
	Data *Pagination `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *GetReplyCommentsRequest) Reset()      { *m = GetReplyCommentsRequest{} }
func (*GetReplyCommentsRequest) ProtoMessage() {}
func (*GetReplyCommentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogComment, []int{3}
}

func (m *GetReplyCommentsRequest) GetPostId() string {
	if m != nil {
		return m.PostId
	}
	return ""
}

func (m *GetReplyCommentsRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *GetReplyCommentsRequest) GetData() *Pagination {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetReplyCommentsResponse struct {
	// Trả về danh sách reply của comment
	ListComment []*Comment `protobuf:"bytes,1,rep,name=list_comment,json=listComment" json:"list_comment,omitempty"`
	// Phân trang
	Data *Pagination `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *GetReplyCommentsResponse) Reset()      { *m = GetReplyCommentsResponse{} }
func (*GetReplyCommentsResponse) ProtoMessage() {}
func (*GetReplyCommentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogComment, []int{4}
}

func (m *GetReplyCommentsResponse) GetListComment() []*Comment {
	if m != nil {
		return m.ListComment
	}
	return nil
}

func (m *GetReplyCommentsResponse) GetData() *Pagination {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdateCommentRequest struct {
	// Cập nhật comment
	Comment *Comment `protobuf:"bytes,1,opt,name=comment" json:"comment,omitempty"`
}

func (m *UpdateCommentRequest) Reset()                    { *m = UpdateCommentRequest{} }
func (*UpdateCommentRequest) ProtoMessage()               {}
func (*UpdateCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlogComment, []int{5} }

func (m *UpdateCommentRequest) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type DeleteCommentRequest struct {
	// Id comment muốn xóa
	CommentId string `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (m *DeleteCommentRequest) Reset()                    { *m = DeleteCommentRequest{} }
func (*DeleteCommentRequest) ProtoMessage()               {}
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlogComment, []int{6} }

func (m *DeleteCommentRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

type DeleteCommentsOfPostRequest struct {
	// Id bài viết muốn xóa comment
	PostId string `protobuf:"bytes,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
}

func (m *DeleteCommentsOfPostRequest) Reset()      { *m = DeleteCommentsOfPostRequest{} }
func (*DeleteCommentsOfPostRequest) ProtoMessage() {}
func (*DeleteCommentsOfPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogComment, []int{7}
}

func (m *DeleteCommentsOfPostRequest) GetPostId() string {
	if m != nil {
		return m.PostId
	}
	return ""
}

type DeleteCommentsOfOwnPostRequest struct {
	// Id bài viết của tôi muốn xóa comment
	PostId string `protobuf:"bytes,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
}

func (m *DeleteCommentsOfOwnPostRequest) Reset()      { *m = DeleteCommentsOfOwnPostRequest{} }
func (*DeleteCommentsOfOwnPostRequest) ProtoMessage() {}
func (*DeleteCommentsOfOwnPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogComment, []int{8}
}

func (m *DeleteCommentsOfOwnPostRequest) GetPostId() string {
	if m != nil {
		return m.PostId
	}
	return ""
}

type VoteCommentRequest struct {
	// Vote comment
	CommentId string `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (m *VoteCommentRequest) Reset()                    { *m = VoteCommentRequest{} }
func (*VoteCommentRequest) ProtoMessage()               {}
func (*VoteCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlogComment, []int{9} }

func (m *VoteCommentRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateCommentRequest)(nil), "blog.CreateCommentRequest")
	proto.RegisterType((*GetCommentsOfPostRequest)(nil), "blog.GetCommentsOfPostRequest")
	proto.RegisterType((*GetCommentsOfPostResponse)(nil), "blog.GetCommentsOfPostResponse")
	proto.RegisterType((*GetReplyCommentsRequest)(nil), "blog.GetReplyCommentsRequest")
	proto.RegisterType((*GetReplyCommentsResponse)(nil), "blog.GetReplyCommentsResponse")
	proto.RegisterType((*UpdateCommentRequest)(nil), "blog.UpdateCommentRequest")
	proto.RegisterType((*DeleteCommentRequest)(nil), "blog.DeleteCommentRequest")
	proto.RegisterType((*DeleteCommentsOfPostRequest)(nil), "blog.DeleteCommentsOfPostRequest")
	proto.RegisterType((*DeleteCommentsOfOwnPostRequest)(nil), "blog.DeleteCommentsOfOwnPostRequest")
	proto.RegisterType((*VoteCommentRequest)(nil), "blog.VoteCommentRequest")
}
func (this *CreateCommentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCommentRequest)
	if !ok {
		that2, ok := that.(CreateCommentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Comment.Equal(that1.Comment) {
		return false
	}
	return true
}
func (this *GetCommentsOfPostRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCommentsOfPostRequest)
	if !ok {
		that2, ok := that.(GetCommentsOfPostRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PostId != that1.PostId {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *GetCommentsOfPostResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCommentsOfPostResponse)
	if !ok {
		that2, ok := that.(GetCommentsOfPostResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ListComment) != len(that1.ListComment) {
		return false
	}
	for i := range this.ListComment {
		if !this.ListComment[i].Equal(that1.ListComment[i]) {
			return false
		}
	}
	return true
}
func (this *GetReplyCommentsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReplyCommentsRequest)
	if !ok {
		that2, ok := that.(GetReplyCommentsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PostId != that1.PostId {
		return false
	}
	if this.ParentId != that1.ParentId {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *GetReplyCommentsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReplyCommentsResponse)
	if !ok {
		that2, ok := that.(GetReplyCommentsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ListComment) != len(that1.ListComment) {
		return false
	}
	for i := range this.ListComment {
		if !this.ListComment[i].Equal(that1.ListComment[i]) {
			return false
		}
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *UpdateCommentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCommentRequest)
	if !ok {
		that2, ok := that.(UpdateCommentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Comment.Equal(that1.Comment) {
		return false
	}
	return true
}
func (this *DeleteCommentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCommentRequest)
	if !ok {
		that2, ok := that.(DeleteCommentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommentId != that1.CommentId {
		return false
	}
	return true
}
func (this *DeleteCommentsOfPostRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCommentsOfPostRequest)
	if !ok {
		that2, ok := that.(DeleteCommentsOfPostRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PostId != that1.PostId {
		return false
	}
	return true
}
func (this *DeleteCommentsOfOwnPostRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCommentsOfOwnPostRequest)
	if !ok {
		that2, ok := that.(DeleteCommentsOfOwnPostRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PostId != that1.PostId {
		return false
	}
	return true
}
func (this *VoteCommentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoteCommentRequest)
	if !ok {
		that2, ok := that.(VoteCommentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommentId != that1.CommentId {
		return false
	}
	return true
}
func (this *CreateCommentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.CreateCommentRequest{")
	if this.Comment != nil {
		s = append(s, "Comment: "+fmt.Sprintf("%#v", this.Comment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCommentsOfPostRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&blog.GetCommentsOfPostRequest{")
	s = append(s, "PostId: "+fmt.Sprintf("%#v", this.PostId)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCommentsOfPostResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetCommentsOfPostResponse{")
	if this.ListComment != nil {
		s = append(s, "ListComment: "+fmt.Sprintf("%#v", this.ListComment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReplyCommentsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&blog.GetReplyCommentsRequest{")
	s = append(s, "PostId: "+fmt.Sprintf("%#v", this.PostId)+",\n")
	s = append(s, "ParentId: "+fmt.Sprintf("%#v", this.ParentId)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReplyCommentsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&blog.GetReplyCommentsResponse{")
	if this.ListComment != nil {
		s = append(s, "ListComment: "+fmt.Sprintf("%#v", this.ListComment)+",\n")
	}
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCommentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.UpdateCommentRequest{")
	if this.Comment != nil {
		s = append(s, "Comment: "+fmt.Sprintf("%#v", this.Comment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCommentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.DeleteCommentRequest{")
	s = append(s, "CommentId: "+fmt.Sprintf("%#v", this.CommentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCommentsOfPostRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.DeleteCommentsOfPostRequest{")
	s = append(s, "PostId: "+fmt.Sprintf("%#v", this.PostId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCommentsOfOwnPostRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.DeleteCommentsOfOwnPostRequest{")
	s = append(s, "PostId: "+fmt.Sprintf("%#v", this.PostId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoteCommentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.VoteCommentRequest{")
	s = append(s, "CommentId: "+fmt.Sprintf("%#v", this.CommentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBlogComment(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Comment != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(m.Comment.Size()))
		n1, err := m.Comment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetCommentsOfPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentsOfPostRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PostId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(len(m.PostId)))
		i += copy(dAtA[i:], m.PostId)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetCommentsOfPostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentsOfPostResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ListComment) > 0 {
		for _, msg := range m.ListComment {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlogComment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetReplyCommentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReplyCommentsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PostId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(len(m.PostId)))
		i += copy(dAtA[i:], m.PostId)
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GetReplyCommentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReplyCommentsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ListComment) > 0 {
		for _, msg := range m.ListComment {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlogComment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *UpdateCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Comment != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(m.Comment.Size()))
		n5, err := m.Comment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *DeleteCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	return i, nil
}

func (m *DeleteCommentsOfPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentsOfPostRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PostId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(len(m.PostId)))
		i += copy(dAtA[i:], m.PostId)
	}
	return i, nil
}

func (m *DeleteCommentsOfOwnPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentsOfOwnPostRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PostId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(len(m.PostId)))
		i += copy(dAtA[i:], m.PostId)
	}
	return i, nil
}

func (m *VoteCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogComment(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	return i, nil
}

func encodeVarintBlogComment(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateCommentRequest) Size() (n int) {
	var l int
	_ = l
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovBlogComment(uint64(l))
	}
	return n
}

func (m *GetCommentsOfPostRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.PostId)
	if l > 0 {
		n += 1 + l + sovBlogComment(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlogComment(uint64(l))
	}
	return n
}

func (m *GetCommentsOfPostResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ListComment) > 0 {
		for _, e := range m.ListComment {
			l = e.Size()
			n += 1 + l + sovBlogComment(uint64(l))
		}
	}
	return n
}

func (m *GetReplyCommentsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.PostId)
	if l > 0 {
		n += 1 + l + sovBlogComment(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovBlogComment(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlogComment(uint64(l))
	}
	return n
}

func (m *GetReplyCommentsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ListComment) > 0 {
		for _, e := range m.ListComment {
			l = e.Size()
			n += 1 + l + sovBlogComment(uint64(l))
		}
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlogComment(uint64(l))
	}
	return n
}

func (m *UpdateCommentRequest) Size() (n int) {
	var l int
	_ = l
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovBlogComment(uint64(l))
	}
	return n
}

func (m *DeleteCommentRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovBlogComment(uint64(l))
	}
	return n
}

func (m *DeleteCommentsOfPostRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.PostId)
	if l > 0 {
		n += 1 + l + sovBlogComment(uint64(l))
	}
	return n
}

func (m *DeleteCommentsOfOwnPostRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.PostId)
	if l > 0 {
		n += 1 + l + sovBlogComment(uint64(l))
	}
	return n
}

func (m *VoteCommentRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovBlogComment(uint64(l))
	}
	return n
}

func sovBlogComment(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlogComment(x uint64) (n int) {
	return sovBlogComment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateCommentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCommentRequest{`,
		`Comment:` + strings.Replace(fmt.Sprintf("%v", this.Comment), "Comment", "Comment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCommentsOfPostRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCommentsOfPostRequest{`,
		`PostId:` + fmt.Sprintf("%v", this.PostId) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Pagination", "Pagination", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCommentsOfPostResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCommentsOfPostResponse{`,
		`ListComment:` + strings.Replace(fmt.Sprintf("%v", this.ListComment), "Comment", "Comment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReplyCommentsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReplyCommentsRequest{`,
		`PostId:` + fmt.Sprintf("%v", this.PostId) + `,`,
		`ParentId:` + fmt.Sprintf("%v", this.ParentId) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Pagination", "Pagination", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReplyCommentsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReplyCommentsResponse{`,
		`ListComment:` + strings.Replace(fmt.Sprintf("%v", this.ListComment), "Comment", "Comment", 1) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Pagination", "Pagination", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCommentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCommentRequest{`,
		`Comment:` + strings.Replace(fmt.Sprintf("%v", this.Comment), "Comment", "Comment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCommentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCommentRequest{`,
		`CommentId:` + fmt.Sprintf("%v", this.CommentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCommentsOfPostRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCommentsOfPostRequest{`,
		`PostId:` + fmt.Sprintf("%v", this.PostId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCommentsOfOwnPostRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCommentsOfOwnPostRequest{`,
		`PostId:` + fmt.Sprintf("%v", this.PostId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoteCommentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoteCommentRequest{`,
		`CommentId:` + fmt.Sprintf("%v", this.CommentId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBlogComment(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommentsOfPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentsOfPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentsOfPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Pagination{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommentsOfPostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentsOfPostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentsOfPostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListComment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListComment = append(m.ListComment, &Comment{})
			if err := m.ListComment[len(m.ListComment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReplyCommentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReplyCommentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReplyCommentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Pagination{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReplyCommentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReplyCommentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReplyCommentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListComment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListComment = append(m.ListComment, &Comment{})
			if err := m.ListComment[len(m.ListComment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Pagination{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentsOfPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentsOfPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentsOfPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentsOfOwnPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentsOfOwnPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentsOfOwnPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlogComment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlogComment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlogComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlogComment
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlogComment
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlogComment(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlogComment = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlogComment   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("blog_comment.proto", fileDescriptorBlogComment) }

var fileDescriptorBlogComment = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xca, 0xc9, 0x4f,
	0x8f, 0x4f, 0xce, 0xcf, 0xcd, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x01, 0x89, 0x49, 0x71, 0x25, 0x25, 0x16, 0xa7, 0x42, 0x44, 0x94, 0xec, 0xb9, 0x44, 0x9c, 0x8b,
	0x52, 0x13, 0x4b, 0x52, 0x9d, 0x21, 0x0a, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xd4,
	0xb9, 0xd8, 0xa1, 0x5a, 0x25, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0x78, 0xf5, 0x40, 0x7a, 0xf5,
	0x60, 0xca, 0x60, 0xb2, 0x4a, 0x91, 0x5c, 0x12, 0xee, 0xa9, 0x25, 0x50, 0xe1, 0x62, 0xff, 0xb4,
	0x80, 0xfc, 0x62, 0xb8, 0x21, 0xe2, 0x5c, 0xec, 0x05, 0xf9, 0xc5, 0x25, 0xf1, 0x99, 0x29, 0x60,
	0x43, 0x38, 0x83, 0xd8, 0x40, 0x5c, 0xcf, 0x14, 0x21, 0x15, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44,
	0x09, 0x26, 0xb0, 0xd1, 0x02, 0x10, 0xa3, 0x03, 0x12, 0xd3, 0x33, 0xf3, 0x12, 0x4b, 0x32, 0xf3,
	0xf3, 0x82, 0xc0, 0xb2, 0x4a, 0xbe, 0x5c, 0x92, 0x58, 0x8c, 0x2e, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e,
	0x15, 0x32, 0xe0, 0xe2, 0xc9, 0xc9, 0x2c, 0x2e, 0x89, 0x47, 0xb8, 0x92, 0x19, 0xd3, 0x95, 0xdc,
	0x20, 0x25, 0x50, 0x8e, 0x52, 0x29, 0x97, 0xb8, 0x7b, 0x6a, 0x49, 0x50, 0x6a, 0x41, 0x4e, 0x25,
	0xcc, 0x4c, 0x82, 0x0e, 0x95, 0xe6, 0xe2, 0x2c, 0x48, 0x2c, 0x4a, 0xcd, 0x03, 0x4b, 0x31, 0x81,
	0xa5, 0x38, 0x20, 0x02, 0x48, 0xbe, 0x60, 0xc6, 0xeb, 0x8b, 0x22, 0x70, 0x00, 0xa1, 0x59, 0x4b,
	0xae, 0x27, 0x88, 0x0c, 0x39, 0x7b, 0x2e, 0x91, 0xd0, 0x82, 0x14, 0x0a, 0x62, 0xd5, 0x94, 0x4b,
	0xc4, 0x25, 0x35, 0x27, 0x15, 0xc3, 0x00, 0x59, 0x2e, 0x2e, 0xa8, 0x12, 0x44, 0x58, 0x71, 0x42,
	0x45, 0x3c, 0x53, 0x94, 0xcc, 0xb8, 0xa4, 0x51, 0xb4, 0x11, 0x99, 0x1e, 0x94, 0x2c, 0xb9, 0xe4,
	0xd0, 0xf5, 0xf9, 0x97, 0xe7, 0x11, 0xa5, 0xd5, 0x98, 0x4b, 0x28, 0x2c, 0x9f, 0x44, 0x77, 0x3a,
	0xe9, 0x5c, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f,
	0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07,
	0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x24, 0x36, 0x70, 0x56, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x70, 0x83, 0xcf, 0x52,
	0x03, 0x00, 0x00,
}
