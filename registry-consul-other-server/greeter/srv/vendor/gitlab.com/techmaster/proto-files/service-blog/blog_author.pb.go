// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blog_author.proto

package blog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import auth "gitlab.com/techmaster/proto-files/service-auth"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetPersonalBlogInfoResponse struct {
	// Trả về thông tin tác giả bài viết
	AuthorStats *AuthorStats `protobuf:"bytes,1,opt,name=author_stats,json=authorStats" json:"author_stats,omitempty"`
	// Số lượng bài viết đã bookmark
	NumberOfBookmark int32 `protobuf:"varint,2,opt,name=number_of_bookmark,json=numberOfBookmark,proto3" json:"number_of_bookmark,omitempty"`
}

func (m *GetPersonalBlogInfoResponse) Reset()      { *m = GetPersonalBlogInfoResponse{} }
func (*GetPersonalBlogInfoResponse) ProtoMessage() {}
func (*GetPersonalBlogInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogAuthor, []int{0}
}

func (m *GetPersonalBlogInfoResponse) GetAuthorStats() *AuthorStats {
	if m != nil {
		return m.AuthorStats
	}
	return nil
}

func (m *GetPersonalBlogInfoResponse) GetNumberOfBookmark() int32 {
	if m != nil {
		return m.NumberOfBookmark
	}
	return 0
}

type GetAuthorByIdRequest struct {
	// Id tác giả
	AuthorId string `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (m *GetAuthorByIdRequest) Reset()                    { *m = GetAuthorByIdRequest{} }
func (*GetAuthorByIdRequest) ProtoMessage()               {}
func (*GetAuthorByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlogAuthor, []int{1} }

func (m *GetAuthorByIdRequest) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

type GetAuthorByIdResponse struct {
	// Trả về thông tin tác giả bài viết
	AuthorStats *AuthorStats `protobuf:"bytes,1,opt,name=author_stats,json=authorStats" json:"author_stats,omitempty"`
}

func (m *GetAuthorByIdResponse) Reset()                    { *m = GetAuthorByIdResponse{} }
func (*GetAuthorByIdResponse) ProtoMessage()               {}
func (*GetAuthorByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptorBlogAuthor, []int{2} }

func (m *GetAuthorByIdResponse) GetAuthorStats() *AuthorStats {
	if m != nil {
		return m.AuthorStats
	}
	return nil
}

type GetHotAuthorsResponse struct {
}

func (m *GetHotAuthorsResponse) Reset()                    { *m = GetHotAuthorsResponse{} }
func (*GetHotAuthorsResponse) ProtoMessage()               {}
func (*GetHotAuthorsResponse) Descriptor() ([]byte, []int) { return fileDescriptorBlogAuthor, []int{3} }

type GetPublishedPostsByAuthorRequest struct {
	// Id của tác giả
	AuthorId string `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	// Phân trang
	Data *Pagination `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *GetPublishedPostsByAuthorRequest) Reset()      { *m = GetPublishedPostsByAuthorRequest{} }
func (*GetPublishedPostsByAuthorRequest) ProtoMessage() {}
func (*GetPublishedPostsByAuthorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogAuthor, []int{4}
}

func (m *GetPublishedPostsByAuthorRequest) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

func (m *GetPublishedPostsByAuthorRequest) GetData() *Pagination {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetSameAuthorPublishedPostsRequest struct {
	// Id của tác giả
	AuthorId string `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	// Id bài viết hiện tại
	CurrentPostId string `protobuf:"bytes,2,opt,name=current_post_id,json=currentPostId,proto3" json:"current_post_id,omitempty"`
	// Số bài viết tương tự muốn hiển thị
	NumberSamePosts int32 `protobuf:"varint,3,opt,name=number_same_posts,json=numberSamePosts,proto3" json:"number_same_posts,omitempty"`
	// Danh sách bài viết tương tự
	SamePosts []*Post `protobuf:"bytes,4,rep,name=same_posts,json=samePosts" json:"same_posts,omitempty"`
}

func (m *GetSameAuthorPublishedPostsRequest) Reset()      { *m = GetSameAuthorPublishedPostsRequest{} }
func (*GetSameAuthorPublishedPostsRequest) ProtoMessage() {}
func (*GetSameAuthorPublishedPostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogAuthor, []int{5}
}

func (m *GetSameAuthorPublishedPostsRequest) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

func (m *GetSameAuthorPublishedPostsRequest) GetCurrentPostId() string {
	if m != nil {
		return m.CurrentPostId
	}
	return ""
}

func (m *GetSameAuthorPublishedPostsRequest) GetNumberSamePosts() int32 {
	if m != nil {
		return m.NumberSamePosts
	}
	return 0
}

func (m *GetSameAuthorPublishedPostsRequest) GetSamePosts() []*Post {
	if m != nil {
		return m.SamePosts
	}
	return nil
}

type FollowAuthorRequest struct {
	// Id tác giả
	AuthorId string `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (m *FollowAuthorRequest) Reset()                    { *m = FollowAuthorRequest{} }
func (*FollowAuthorRequest) ProtoMessage()               {}
func (*FollowAuthorRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlogAuthor, []int{6} }

func (m *FollowAuthorRequest) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

type UnFollowAuthorRequest struct {
	// Id tác giả
	AuthorId string `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (m *UnFollowAuthorRequest) Reset()                    { *m = UnFollowAuthorRequest{} }
func (*UnFollowAuthorRequest) ProtoMessage()               {}
func (*UnFollowAuthorRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlogAuthor, []int{7} }

func (m *UnFollowAuthorRequest) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

type GetPersonalFollowResponse struct {
	// Danh sách User theo dõi cá nhân
	FollowPersonal []*auth.User `protobuf:"bytes,1,rep,name=follow_personal,json=followPersonal" json:"follow_personal,omitempty"`
	// Danh sách User mà cá nhân theo dõi
	PersonalFollow []*auth.User `protobuf:"bytes,2,rep,name=personal_follow,json=personalFollow" json:"personal_follow,omitempty"`
	// Phân trang
	Data *Pagination `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *GetPersonalFollowResponse) Reset()      { *m = GetPersonalFollowResponse{} }
func (*GetPersonalFollowResponse) ProtoMessage() {}
func (*GetPersonalFollowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogAuthor, []int{8}
}

func (m *GetPersonalFollowResponse) GetFollowPersonal() []*auth.User {
	if m != nil {
		return m.FollowPersonal
	}
	return nil
}

func (m *GetPersonalFollowResponse) GetPersonalFollow() []*auth.User {
	if m != nil {
		return m.PersonalFollow
	}
	return nil
}

func (m *GetPersonalFollowResponse) GetData() *Pagination {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetAuthorFollowRequest struct {
	// Id tác giả
	AuthorId string `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (m *GetAuthorFollowRequest) Reset()                    { *m = GetAuthorFollowRequest{} }
func (*GetAuthorFollowRequest) ProtoMessage()               {}
func (*GetAuthorFollowRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlogAuthor, []int{9} }

func (m *GetAuthorFollowRequest) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

type GetAuthorFollowResponse struct {
	// Danh sách User theo dõi tác giả
	FollowAuthor []*auth.User `protobuf:"bytes,1,rep,name=follow_author,json=followAuthor" json:"follow_author,omitempty"`
	// Danh sách User tác giả theo dõi
	AuthorFollow []*auth.User `protobuf:"bytes,2,rep,name=author_follow,json=authorFollow" json:"author_follow,omitempty"`
	// Phân trang
	Data *Pagination `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *GetAuthorFollowResponse) Reset()      { *m = GetAuthorFollowResponse{} }
func (*GetAuthorFollowResponse) ProtoMessage() {}
func (*GetAuthorFollowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBlogAuthor, []int{10}
}

func (m *GetAuthorFollowResponse) GetFollowAuthor() []*auth.User {
	if m != nil {
		return m.FollowAuthor
	}
	return nil
}

func (m *GetAuthorFollowResponse) GetAuthorFollow() []*auth.User {
	if m != nil {
		return m.AuthorFollow
	}
	return nil
}

func (m *GetAuthorFollowResponse) GetData() *Pagination {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPersonalBlogInfoResponse)(nil), "blog.GetPersonalBlogInfoResponse")
	proto.RegisterType((*GetAuthorByIdRequest)(nil), "blog.GetAuthorByIdRequest")
	proto.RegisterType((*GetAuthorByIdResponse)(nil), "blog.GetAuthorByIdResponse")
	proto.RegisterType((*GetHotAuthorsResponse)(nil), "blog.GetHotAuthorsResponse")
	proto.RegisterType((*GetPublishedPostsByAuthorRequest)(nil), "blog.GetPublishedPostsByAuthorRequest")
	proto.RegisterType((*GetSameAuthorPublishedPostsRequest)(nil), "blog.GetSameAuthorPublishedPostsRequest")
	proto.RegisterType((*FollowAuthorRequest)(nil), "blog.FollowAuthorRequest")
	proto.RegisterType((*UnFollowAuthorRequest)(nil), "blog.UnFollowAuthorRequest")
	proto.RegisterType((*GetPersonalFollowResponse)(nil), "blog.GetPersonalFollowResponse")
	proto.RegisterType((*GetAuthorFollowRequest)(nil), "blog.GetAuthorFollowRequest")
	proto.RegisterType((*GetAuthorFollowResponse)(nil), "blog.GetAuthorFollowResponse")
}
func (this *GetPersonalBlogInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPersonalBlogInfoResponse)
	if !ok {
		that2, ok := that.(GetPersonalBlogInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthorStats.Equal(that1.AuthorStats) {
		return false
	}
	if this.NumberOfBookmark != that1.NumberOfBookmark {
		return false
	}
	return true
}
func (this *GetAuthorByIdRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAuthorByIdRequest)
	if !ok {
		that2, ok := that.(GetAuthorByIdRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthorId != that1.AuthorId {
		return false
	}
	return true
}
func (this *GetAuthorByIdResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAuthorByIdResponse)
	if !ok {
		that2, ok := that.(GetAuthorByIdResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthorStats.Equal(that1.AuthorStats) {
		return false
	}
	return true
}
func (this *GetHotAuthorsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHotAuthorsResponse)
	if !ok {
		that2, ok := that.(GetHotAuthorsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetPublishedPostsByAuthorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPublishedPostsByAuthorRequest)
	if !ok {
		that2, ok := that.(GetPublishedPostsByAuthorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthorId != that1.AuthorId {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *GetSameAuthorPublishedPostsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSameAuthorPublishedPostsRequest)
	if !ok {
		that2, ok := that.(GetSameAuthorPublishedPostsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthorId != that1.AuthorId {
		return false
	}
	if this.CurrentPostId != that1.CurrentPostId {
		return false
	}
	if this.NumberSamePosts != that1.NumberSamePosts {
		return false
	}
	if len(this.SamePosts) != len(that1.SamePosts) {
		return false
	}
	for i := range this.SamePosts {
		if !this.SamePosts[i].Equal(that1.SamePosts[i]) {
			return false
		}
	}
	return true
}
func (this *FollowAuthorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FollowAuthorRequest)
	if !ok {
		that2, ok := that.(FollowAuthorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthorId != that1.AuthorId {
		return false
	}
	return true
}
func (this *UnFollowAuthorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnFollowAuthorRequest)
	if !ok {
		that2, ok := that.(UnFollowAuthorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthorId != that1.AuthorId {
		return false
	}
	return true
}
func (this *GetPersonalFollowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPersonalFollowResponse)
	if !ok {
		that2, ok := that.(GetPersonalFollowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FollowPersonal) != len(that1.FollowPersonal) {
		return false
	}
	for i := range this.FollowPersonal {
		if !this.FollowPersonal[i].Equal(that1.FollowPersonal[i]) {
			return false
		}
	}
	if len(this.PersonalFollow) != len(that1.PersonalFollow) {
		return false
	}
	for i := range this.PersonalFollow {
		if !this.PersonalFollow[i].Equal(that1.PersonalFollow[i]) {
			return false
		}
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *GetAuthorFollowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAuthorFollowRequest)
	if !ok {
		that2, ok := that.(GetAuthorFollowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthorId != that1.AuthorId {
		return false
	}
	return true
}
func (this *GetAuthorFollowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAuthorFollowResponse)
	if !ok {
		that2, ok := that.(GetAuthorFollowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FollowAuthor) != len(that1.FollowAuthor) {
		return false
	}
	for i := range this.FollowAuthor {
		if !this.FollowAuthor[i].Equal(that1.FollowAuthor[i]) {
			return false
		}
	}
	if len(this.AuthorFollow) != len(that1.AuthorFollow) {
		return false
	}
	for i := range this.AuthorFollow {
		if !this.AuthorFollow[i].Equal(that1.AuthorFollow[i]) {
			return false
		}
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *GetPersonalBlogInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&blog.GetPersonalBlogInfoResponse{")
	if this.AuthorStats != nil {
		s = append(s, "AuthorStats: "+fmt.Sprintf("%#v", this.AuthorStats)+",\n")
	}
	s = append(s, "NumberOfBookmark: "+fmt.Sprintf("%#v", this.NumberOfBookmark)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAuthorByIdRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetAuthorByIdRequest{")
	s = append(s, "AuthorId: "+fmt.Sprintf("%#v", this.AuthorId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAuthorByIdResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetAuthorByIdResponse{")
	if this.AuthorStats != nil {
		s = append(s, "AuthorStats: "+fmt.Sprintf("%#v", this.AuthorStats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetHotAuthorsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&blog.GetHotAuthorsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPublishedPostsByAuthorRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&blog.GetPublishedPostsByAuthorRequest{")
	s = append(s, "AuthorId: "+fmt.Sprintf("%#v", this.AuthorId)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSameAuthorPublishedPostsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&blog.GetSameAuthorPublishedPostsRequest{")
	s = append(s, "AuthorId: "+fmt.Sprintf("%#v", this.AuthorId)+",\n")
	s = append(s, "CurrentPostId: "+fmt.Sprintf("%#v", this.CurrentPostId)+",\n")
	s = append(s, "NumberSamePosts: "+fmt.Sprintf("%#v", this.NumberSamePosts)+",\n")
	if this.SamePosts != nil {
		s = append(s, "SamePosts: "+fmt.Sprintf("%#v", this.SamePosts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FollowAuthorRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.FollowAuthorRequest{")
	s = append(s, "AuthorId: "+fmt.Sprintf("%#v", this.AuthorId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnFollowAuthorRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.UnFollowAuthorRequest{")
	s = append(s, "AuthorId: "+fmt.Sprintf("%#v", this.AuthorId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPersonalFollowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&blog.GetPersonalFollowResponse{")
	if this.FollowPersonal != nil {
		s = append(s, "FollowPersonal: "+fmt.Sprintf("%#v", this.FollowPersonal)+",\n")
	}
	if this.PersonalFollow != nil {
		s = append(s, "PersonalFollow: "+fmt.Sprintf("%#v", this.PersonalFollow)+",\n")
	}
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAuthorFollowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blog.GetAuthorFollowRequest{")
	s = append(s, "AuthorId: "+fmt.Sprintf("%#v", this.AuthorId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAuthorFollowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&blog.GetAuthorFollowResponse{")
	if this.FollowAuthor != nil {
		s = append(s, "FollowAuthor: "+fmt.Sprintf("%#v", this.FollowAuthor)+",\n")
	}
	if this.AuthorFollow != nil {
		s = append(s, "AuthorFollow: "+fmt.Sprintf("%#v", this.AuthorFollow)+",\n")
	}
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBlogAuthor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GetPersonalBlogInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPersonalBlogInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthorStats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(m.AuthorStats.Size()))
		n1, err := m.AuthorStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.NumberOfBookmark != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(m.NumberOfBookmark))
	}
	return i, nil
}

func (m *GetAuthorByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(len(m.AuthorId)))
		i += copy(dAtA[i:], m.AuthorId)
	}
	return i, nil
}

func (m *GetAuthorByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthorStats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(m.AuthorStats.Size()))
		n2, err := m.AuthorStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetHotAuthorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotAuthorsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetPublishedPostsByAuthorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPublishedPostsByAuthorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(len(m.AuthorId)))
		i += copy(dAtA[i:], m.AuthorId)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GetSameAuthorPublishedPostsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSameAuthorPublishedPostsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(len(m.AuthorId)))
		i += copy(dAtA[i:], m.AuthorId)
	}
	if len(m.CurrentPostId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(len(m.CurrentPostId)))
		i += copy(dAtA[i:], m.CurrentPostId)
	}
	if m.NumberSamePosts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(m.NumberSamePosts))
	}
	if len(m.SamePosts) > 0 {
		for _, msg := range m.SamePosts {
			dAtA[i] = 0x22
			i++
			i = encodeVarintBlogAuthor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FollowAuthorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowAuthorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(len(m.AuthorId)))
		i += copy(dAtA[i:], m.AuthorId)
	}
	return i, nil
}

func (m *UnFollowAuthorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnFollowAuthorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(len(m.AuthorId)))
		i += copy(dAtA[i:], m.AuthorId)
	}
	return i, nil
}

func (m *GetPersonalFollowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPersonalFollowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FollowPersonal) > 0 {
		for _, msg := range m.FollowPersonal {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlogAuthor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PersonalFollow) > 0 {
		for _, msg := range m.PersonalFollow {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlogAuthor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GetAuthorFollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorFollowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(len(m.AuthorId)))
		i += copy(dAtA[i:], m.AuthorId)
	}
	return i, nil
}

func (m *GetAuthorFollowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorFollowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FollowAuthor) > 0 {
		for _, msg := range m.FollowAuthor {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlogAuthor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AuthorFollow) > 0 {
		for _, msg := range m.AuthorFollow {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlogAuthor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlogAuthor(dAtA, i, uint64(m.Data.Size()))
		n5, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintBlogAuthor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetPersonalBlogInfoResponse) Size() (n int) {
	var l int
	_ = l
	if m.AuthorStats != nil {
		l = m.AuthorStats.Size()
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	if m.NumberOfBookmark != 0 {
		n += 1 + sovBlogAuthor(uint64(m.NumberOfBookmark))
	}
	return n
}

func (m *GetAuthorByIdRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	return n
}

func (m *GetAuthorByIdResponse) Size() (n int) {
	var l int
	_ = l
	if m.AuthorStats != nil {
		l = m.AuthorStats.Size()
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	return n
}

func (m *GetHotAuthorsResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetPublishedPostsByAuthorRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	return n
}

func (m *GetSameAuthorPublishedPostsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	l = len(m.CurrentPostId)
	if l > 0 {
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	if m.NumberSamePosts != 0 {
		n += 1 + sovBlogAuthor(uint64(m.NumberSamePosts))
	}
	if len(m.SamePosts) > 0 {
		for _, e := range m.SamePosts {
			l = e.Size()
			n += 1 + l + sovBlogAuthor(uint64(l))
		}
	}
	return n
}

func (m *FollowAuthorRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	return n
}

func (m *UnFollowAuthorRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	return n
}

func (m *GetPersonalFollowResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.FollowPersonal) > 0 {
		for _, e := range m.FollowPersonal {
			l = e.Size()
			n += 1 + l + sovBlogAuthor(uint64(l))
		}
	}
	if len(m.PersonalFollow) > 0 {
		for _, e := range m.PersonalFollow {
			l = e.Size()
			n += 1 + l + sovBlogAuthor(uint64(l))
		}
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	return n
}

func (m *GetAuthorFollowRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AuthorId)
	if l > 0 {
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	return n
}

func (m *GetAuthorFollowResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.FollowAuthor) > 0 {
		for _, e := range m.FollowAuthor {
			l = e.Size()
			n += 1 + l + sovBlogAuthor(uint64(l))
		}
	}
	if len(m.AuthorFollow) > 0 {
		for _, e := range m.AuthorFollow {
			l = e.Size()
			n += 1 + l + sovBlogAuthor(uint64(l))
		}
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlogAuthor(uint64(l))
	}
	return n
}

func sovBlogAuthor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlogAuthor(x uint64) (n int) {
	return sovBlogAuthor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetPersonalBlogInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPersonalBlogInfoResponse{`,
		`AuthorStats:` + strings.Replace(fmt.Sprintf("%v", this.AuthorStats), "AuthorStats", "AuthorStats", 1) + `,`,
		`NumberOfBookmark:` + fmt.Sprintf("%v", this.NumberOfBookmark) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAuthorByIdRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAuthorByIdRequest{`,
		`AuthorId:` + fmt.Sprintf("%v", this.AuthorId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAuthorByIdResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAuthorByIdResponse{`,
		`AuthorStats:` + strings.Replace(fmt.Sprintf("%v", this.AuthorStats), "AuthorStats", "AuthorStats", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHotAuthorsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHotAuthorsResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetPublishedPostsByAuthorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPublishedPostsByAuthorRequest{`,
		`AuthorId:` + fmt.Sprintf("%v", this.AuthorId) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Pagination", "Pagination", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSameAuthorPublishedPostsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSameAuthorPublishedPostsRequest{`,
		`AuthorId:` + fmt.Sprintf("%v", this.AuthorId) + `,`,
		`CurrentPostId:` + fmt.Sprintf("%v", this.CurrentPostId) + `,`,
		`NumberSamePosts:` + fmt.Sprintf("%v", this.NumberSamePosts) + `,`,
		`SamePosts:` + strings.Replace(fmt.Sprintf("%v", this.SamePosts), "Post", "Post", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FollowAuthorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FollowAuthorRequest{`,
		`AuthorId:` + fmt.Sprintf("%v", this.AuthorId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnFollowAuthorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnFollowAuthorRequest{`,
		`AuthorId:` + fmt.Sprintf("%v", this.AuthorId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPersonalFollowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPersonalFollowResponse{`,
		`FollowPersonal:` + strings.Replace(fmt.Sprintf("%v", this.FollowPersonal), "User", "auth.User", 1) + `,`,
		`PersonalFollow:` + strings.Replace(fmt.Sprintf("%v", this.PersonalFollow), "User", "auth.User", 1) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Pagination", "Pagination", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAuthorFollowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAuthorFollowRequest{`,
		`AuthorId:` + fmt.Sprintf("%v", this.AuthorId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAuthorFollowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAuthorFollowResponse{`,
		`FollowAuthor:` + strings.Replace(fmt.Sprintf("%v", this.FollowAuthor), "User", "auth.User", 1) + `,`,
		`AuthorFollow:` + strings.Replace(fmt.Sprintf("%v", this.AuthorFollow), "User", "auth.User", 1) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Pagination", "Pagination", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBlogAuthor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetPersonalBlogInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPersonalBlogInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPersonalBlogInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorStats == nil {
				m.AuthorStats = &AuthorStats{}
			}
			if err := m.AuthorStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfBookmark", wireType)
			}
			m.NumberOfBookmark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfBookmark |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorStats == nil {
				m.AuthorStats = &AuthorStats{}
			}
			if err := m.AuthorStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotAuthorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotAuthorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotAuthorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPublishedPostsByAuthorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPublishedPostsByAuthorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPublishedPostsByAuthorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Pagination{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSameAuthorPublishedPostsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSameAuthorPublishedPostsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSameAuthorPublishedPostsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPostId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPostId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberSamePosts", wireType)
			}
			m.NumberSamePosts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberSamePosts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamePosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SamePosts = append(m.SamePosts, &Post{})
			if err := m.SamePosts[len(m.SamePosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowAuthorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowAuthorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowAuthorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnFollowAuthorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnFollowAuthorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnFollowAuthorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPersonalFollowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPersonalFollowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPersonalFollowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowPersonal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowPersonal = append(m.FollowPersonal, &auth.User{})
			if err := m.FollowPersonal[len(m.FollowPersonal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalFollow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PersonalFollow = append(m.PersonalFollow, &auth.User{})
			if err := m.PersonalFollow[len(m.PersonalFollow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Pagination{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorFollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorFollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorFollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorFollowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorFollowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorFollowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowAuthor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowAuthor = append(m.FollowAuthor, &auth.User{})
			if err := m.FollowAuthor[len(m.FollowAuthor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorFollow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorFollow = append(m.AuthorFollow, &auth.User{})
			if err := m.AuthorFollow[len(m.AuthorFollow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Pagination{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlogAuthor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlogAuthor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlogAuthor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlogAuthor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlogAuthor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlogAuthor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlogAuthor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlogAuthor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlogAuthor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlogAuthor   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("blog_author.proto", fileDescriptorBlogAuthor) }

var fileDescriptorBlogAuthor = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x6e, 0x12, 0x41,
	0x18, 0x67, 0x00, 0x8d, 0x7c, 0xb4, 0x52, 0x56, 0x6b, 0xb1, 0x4d, 0x26, 0x64, 0x63, 0x0c, 0x9a,
	0x16, 0x12, 0xa8, 0x07, 0x8f, 0x72, 0x10, 0x39, 0x18, 0xc9, 0x36, 0x3d, 0x6f, 0x66, 0xd9, 0x59,
	0xd8, 0x74, 0x77, 0x07, 0x77, 0x06, 0x4d, 0x6f, 0xfa, 0x06, 0xbe, 0x82, 0x37, 0x13, 0x5f, 0xc2,
	0xa3, 0xc7, 0x1e, 0x3d, 0xca, 0x7a, 0xf1, 0xd8, 0x47, 0x30, 0xf3, 0x67, 0x29, 0xb5, 0x6a, 0x68,
	0x3c, 0xf2, 0x7d, 0xbf, 0xbf, 0x33, 0xc3, 0x42, 0xdd, 0x8b, 0xd8, 0xc4, 0x25, 0x73, 0x31, 0x65,
	0x69, 0x7b, 0x96, 0x32, 0xc1, 0xac, 0xb2, 0x1c, 0xed, 0x82, 0x47, 0x38, 0xd5, 0x93, 0xdd, 0xa7,
	0x93, 0x50, 0x44, 0xc4, 0x6b, 0x8f, 0x59, 0xdc, 0x11, 0x74, 0x3c, 0x8d, 0x09, 0x17, 0x34, 0xed,
	0xa8, 0xe5, 0x41, 0x10, 0x46, 0x94, 0x77, 0x38, 0x4d, 0xdf, 0x84, 0x63, 0x7a, 0x20, 0x95, 0x3a,
	0x17, 0x54, 0xfb, 0x3d, 0x82, 0xbd, 0x01, 0x15, 0x23, 0x9a, 0x72, 0x96, 0x90, 0xa8, 0x1f, 0xb1,
	0xc9, 0x30, 0x09, 0x98, 0x43, 0xf9, 0x8c, 0x25, 0x9c, 0x5a, 0x87, 0xb0, 0xa1, 0xcd, 0x5d, 0x2e,
	0x88, 0xe0, 0x0d, 0xd4, 0x44, 0xad, 0x6a, 0xb7, 0xde, 0x96, 0x19, 0xda, 0xcf, 0xd4, 0xe6, 0x48,
	0x2e, 0x9c, 0x2a, 0xb9, 0xf8, 0x61, 0xed, 0x83, 0x95, 0xcc, 0x63, 0x8f, 0xa6, 0x2e, 0x0b, 0x5c,
	0x8f, 0xb1, 0x93, 0x98, 0xa4, 0x27, 0x8d, 0x62, 0x13, 0xb5, 0x6e, 0x38, 0x5b, 0x7a, 0xf3, 0x2a,
	0xe8, 0x9b, 0xb9, 0xdd, 0x83, 0xbb, 0x03, 0x2a, 0xb4, 0x58, 0xff, 0x74, 0xe8, 0x3b, 0xf4, 0xf5,
	0x9c, 0x72, 0x61, 0xed, 0x41, 0xc5, 0x78, 0x87, 0xbe, 0x32, 0xae, 0x38, 0xb7, 0xf4, 0x60, 0xe8,
	0xdb, 0x2f, 0x61, 0xfb, 0x37, 0xd2, 0xff, 0x24, 0xb6, 0x77, 0x94, 0xdc, 0x0b, 0x66, 0x14, 0x79,
	0x2e, 0x67, 0x53, 0x68, 0xca, 0xf3, 0x99, 0x7b, 0x51, 0xc8, 0xa7, 0xd4, 0x1f, 0x31, 0x2e, 0x78,
	0xff, 0x54, 0xa3, 0xd6, 0x09, 0x6a, 0x3d, 0x80, 0xb2, 0x4f, 0x04, 0x51, 0xed, 0xab, 0xdd, 0x2d,
	0x9d, 0x63, 0x44, 0x26, 0x61, 0x42, 0x44, 0xc8, 0x12, 0x47, 0x6d, 0xed, 0x2f, 0x08, 0xec, 0x01,
	0x15, 0x47, 0x24, 0xa6, 0x5a, 0xfb, 0xb2, 0xe3, 0x5a, 0x4e, 0x0f, 0xa1, 0x36, 0x9e, 0xa7, 0x29,
	0x4d, 0x84, 0x3b, 0x63, 0x5c, 0x48, 0x48, 0x51, 0x41, 0x36, 0xcd, 0x58, 0x4a, 0x0d, 0x7d, 0xeb,
	0x31, 0xd4, 0xcd, 0xed, 0x70, 0x12, 0x53, 0x85, 0xe5, 0x8d, 0x92, 0xba, 0x9c, 0x9a, 0x5e, 0xc8,
	0x18, 0xca, 0xd7, 0x7a, 0x04, 0xb0, 0x02, 0x2a, 0x37, 0x4b, 0xad, 0x6a, 0x17, 0x4c, 0x07, 0xc6,
	0x85, 0x53, 0xe1, 0x39, 0xd4, 0xee, 0xc2, 0x9d, 0xe7, 0x2c, 0x8a, 0xd8, 0xdb, 0xf5, 0x0f, 0xc7,
	0x3e, 0x84, 0xed, 0xe3, 0xe4, 0xda, 0xac, 0xcf, 0x08, 0xee, 0xaf, 0x3c, 0x5a, 0xcd, 0x5f, 0x3e,
	0x80, 0x1e, 0xd4, 0x02, 0x35, 0x71, 0x67, 0x06, 0xd0, 0x40, 0x26, 0xb7, 0x54, 0x68, 0x1f, 0x73,
	0x9a, 0x3a, 0xb7, 0x35, 0x24, 0x97, 0x90, 0xa4, 0x1c, 0xed, 0xea, 0x55, 0xa3, 0x78, 0x95, 0x34,
	0xbb, 0xe4, 0xb8, 0xbc, 0xda, 0xd2, 0x3f, 0xaf, 0xf6, 0x09, 0xdc, 0x5b, 0xbe, 0xd4, 0x3c, 0xea,
	0x1a, 0x25, 0x3f, 0x22, 0xd8, 0xb9, 0xc2, 0x33, 0x15, 0x3b, 0xb0, 0x69, 0x2a, 0x6a, 0xf8, 0x1f,
	0x0a, 0x6e, 0x04, 0x2b, 0xa7, 0x2a, 0x09, 0xc6, 0xe9, 0xaf, 0xe5, 0xcc, 0xbf, 0xe6, 0x3a, 0xd5,
	0xfa, 0xfb, 0x67, 0x0b, 0x5c, 0xf8, 0xb6, 0xc0, 0x85, 0xf3, 0x05, 0x46, 0xef, 0x32, 0x8c, 0x3e,
	0x65, 0x18, 0x7d, 0xcd, 0x30, 0x3a, 0xcb, 0x30, 0xfa, 0x9e, 0x61, 0xf4, 0x33, 0xc3, 0x85, 0xf3,
	0x0c, 0xa3, 0x0f, 0x3f, 0x70, 0xc1, 0xbb, 0xa9, 0x3e, 0x39, 0xbd, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x64, 0x4a, 0x25, 0x8f, 0xd4, 0x04, 0x00, 0x00,
}
