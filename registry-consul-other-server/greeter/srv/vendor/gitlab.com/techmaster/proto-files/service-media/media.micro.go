// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: media.proto

/*
Package media is a generated protocol buffer package.

It is generated from these files:
	media.proto
	base.proto
	media_file.proto
	media_image.proto

It has these top-level messages:
	EmptyRequest
	ResultResponse
	Pagination
	Image
	File
	UploadFileRequest
	UploadFileResponse
	GetFilesByIdRequest
	GetFileByIdResponse
	UploadImageRequest
	GetImageByIdRequest
	GetImageByIdResponse
*/
package media

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Media service

type MediaClient interface {
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...client.CallOption) (*ResultResponse, error)
	GetImage(ctx context.Context, in *GetImageByIdRequest, opts ...client.CallOption) (*GetImageByIdResponse, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...client.CallOption) (*UploadFileResponse, error)
	GetFileByID(ctx context.Context, in *GetFilesByIdRequest, opts ...client.CallOption) (*GetFileByIdResponse, error)
}

type mediaClient struct {
	c           client.Client
	serviceName string
}

func NewMediaClient(serviceName string, c client.Client) MediaClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "media"
	}
	return &mediaClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *mediaClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...client.CallOption) (*ResultResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Media.UploadImage", in)
	out := new(ResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) GetImage(ctx context.Context, in *GetImageByIdRequest, opts ...client.CallOption) (*GetImageByIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Media.GetImage", in)
	out := new(GetImageByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...client.CallOption) (*UploadFileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Media.UploadFile", in)
	out := new(UploadFileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) GetFileByID(ctx context.Context, in *GetFilesByIdRequest, opts ...client.CallOption) (*GetFileByIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Media.GetFileByID", in)
	out := new(GetFileByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Media service

type MediaHandler interface {
	UploadImage(context.Context, *UploadImageRequest, *ResultResponse) error
	GetImage(context.Context, *GetImageByIdRequest, *GetImageByIdResponse) error
	UploadFile(context.Context, *UploadFileRequest, *UploadFileResponse) error
	GetFileByID(context.Context, *GetFilesByIdRequest, *GetFileByIdResponse) error
}

func RegisterMediaHandler(s server.Server, hdlr MediaHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Media{hdlr}, opts...))
}

type Media struct {
	MediaHandler
}

func (h *Media) UploadImage(ctx context.Context, in *UploadImageRequest, out *ResultResponse) error {
	return h.MediaHandler.UploadImage(ctx, in, out)
}

func (h *Media) GetImage(ctx context.Context, in *GetImageByIdRequest, out *GetImageByIdResponse) error {
	return h.MediaHandler.GetImage(ctx, in, out)
}

func (h *Media) UploadFile(ctx context.Context, in *UploadFileRequest, out *UploadFileResponse) error {
	return h.MediaHandler.UploadFile(ctx, in, out)
}

func (h *Media) GetFileByID(ctx context.Context, in *GetFilesByIdRequest, out *GetFileByIdResponse) error {
	return h.MediaHandler.GetFileByID(ctx, in, out)
}
